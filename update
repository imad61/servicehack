Item.addCraftRecipe(264, 1, 0, [3, 1, 0]);
var hackermenu;
var emeh = "e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 0d 0a df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 b0 9f 0d 0a d0 8d 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a 8a df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 a0 8a".split(" ");
var em = "e3 a0 8a 98 e3 8a a0 20 98 e3 8a a0 20 98 e3".split(" ");
var mlg = "45 6e 6a 6f 79 20 43 72 61 73 68 20 d9 84 d9 8f d9 84 d9 8f d8 b5 d9 91 d8 a8 d9 8f d9 84 d9 8f d9 84 d8 b5 d9 91 d8 a8 d9 8f d8 b1 d8 b1 d9 8b 20 e0 a5 a3 20 e0 a5 a3 68 20 e0 a5 a3 20 e0 a5 a3 20 e5 86 97 20 0d 0a 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc bb cc 9c cc a4 cc ac cc b1 cd 95 cd 94 cd 8d cd 94 cd 8e cc a5 cd 96 cc 98 cc a3 cc ad cc ad cc 9e cc b2 cd 88 cd 9a cc 9f cc 98 cd 87 cd 95 cc a3 cc ab cc 9f cd 96 cc b0 cc ae cd 95 cc a3 cc ae cc a5 cd 95 cc b0 cc 9d cd 96 cd 87 cc b1 cc 99 cc 9e cc 9d cd 96 cd 8d cd 99 cc ba cd 93 cc 9f cc b9 cc aa cc b3 cc b3 cc 98 cc 96 cc ab cc a6 cc 9e cc 9c cd 8e cc 99 cc 9d cc b0 cc a3 cc a0 cc af cc 99 cd 9a cc 9e cc ab cd 8d cc 97 cc a6 cc b9 cc a3 cc a5 cc 9e cc b3 cc 99 cd 89 cc a9 cc a5 cd 93 cc a6 cc af cd 8d cd 93 cc 9d cc ab cd 93 cc b0 cc b0 cc a0 cd 93 cc 9f cd 94 cc b0 cc a0 cc 9c cd 87 cc b1 cc 96 cc a4 cc a5 cc 98 cc b1 cc b1 cd 88 cd 88 cd 8e cd 89 cc a5 cc 9d cd 88 cc aa cc b3 cc bb cd 95 cd 94 cd 87 cc 9c cc b1 cc ac cc 99 cc b2 cc b0 cc ae cd 88 cc 9c cd 8d cc a5 cc a5 cc 99 cc a4 cc 97 cd 96 cd 87 cd 95 cc a0 cc ae cc 97 cc 9f cc 9f cd 8d cd 95 cc af cc a0 cd 8d cd 89 cc 99 cc 98 cc b2 cd 8e cc b1 cd 8d cc ad cc b1 cc b3 cc 99 cc a6 cc bb cd 87 cc af cc a0 cc b3 cd 94 cc ab cc b0 cc ae cd 89 cc a0 cc 97 cc aa cc af cc a6 cc a4 cc a6 cc a0 cd 87 cd 8e cc b1 cd 89 cc a9 cd 95 cc af cc ae cc af cc a3 cc a0 cc 9d cd 9a cc 97 cc b2 cc 9f cc ba cd 9a cd 93 cd 8d cd 94 cc b0 cd 94 cc b9 cd 88 cc ab cc bb cc aa cc 99 cd 87 cc b2 cc a6 cd 8d cc b9 cc a3 cc 9e cc ab cc bb cd 8e cc b3 cc a5 cd 9a cc a4 cc ae cc b9 cc ad cc 99 cd 87 cc a5 cc aa cd 8e cc a0 cd 89 cc 98 cc ba cd 94 cd 95 cc 99 cc 96 cd 94 cd 89 cc a3 cd 95 cc a9 cd 99 cc 9d cd 95 cc b3 cc bb cd 95 cd 9a cd 89 cc bc cd 96 cc b2 cc ae cd 94 cc b9 cc 97 cc 97 cd 88 cd 93 cd 8e cc 9c cc aa cc 9c cc a9 cc ad cd 8d cd 8e cc a5 cc 9e cc ad cd 99 cc a5 cd 89 cc b2 cc ad cc b1 cc ba cc af cd 8d cc aa cd 8d cc b3 cd 93 cc 96 cc 99 cd 99 cc 98 cc b0 cc a6 cc a4 cd 87 cc ad cc 98 cd 8d cc ba cc 99 cc aa cd 96 cc ae cc af cc b9 cc a9 cc a5 cc 96 cc ba cc b1 cd 87 cc 98 cc b1 cd 8e cc a3 cc 9f cd 8e cc b3 cc 97 cc ac cc b0 cc b1 cc bb cc ab cc bc cc a4 cc 96 cc b3 cd 89 cc bc cc a6 cc bb cc ae cc ba cc a3 cc ad cd 89 cc 96 cc af cc b0 cc 9f cd 96 cc b2 cc 99 cc 98 cc a3 cd 88 cd 94 cd 8d cc 9e cc 96 cc 9f cc 9f cc af cc b1 cc 9d cc a0 cc 9c cd 8e cd 89 cc bb cc 98 cd 99 cd 8d cc 9f cd 93 cd 89 cc 99 cc ba cd 8d cd 9a cc 9e cc ae cd 8e cd 8e cc ae cc b0 cc a0 cc b2 cc ae cc ad cd 99 cc b2 cc a4 cc a9 cc ac cd 8d cc b0 cc 9f cd 99 cd 8d cd 8d cd 87 cc 96 cd 9a cd 93 cc bb cc af cc bb cc b0 cd 88 cd 95 cc b3 cd 94 cc a4 cd 8e cc 9d cc a3 cd 88 cc a9 cc a4 cd 88 cc ad cc af cc aa cc 9f cc bb cd 93 cc aa cd 99 cc bc cc ac cc a0 cc b9 cc 99 cc 96 cc ab cc b0 cc aa cc bb cc a6 cc a9 cc bb cc 9f cc a6 cd 96 cc b2 cc b0 cc 98 cc 9c cc a3 cc 96 cc a4 cd 99 cd 96 cd 8e cc bb cc a9 cd 8d cc a4 cc b1 cd 8d cc 99 cc ab cc ab cc 99 cd 96 cc a0 cc b2 cd 89 cc 97 cc b1 cc b0 cd 94 cc bb cc b3 cc a9 cd 99 cc b1 cd 88 cc a0 cd 87 cc af cd 9a cd 89 cc ae cc 98 cd 95 cd 89 cd 95 cd 9a cd 8e cc ae cc a6 cc ab cd 87 cc 99 cc a5 cc af cc b3 cd 96 cc 9c cc b3 cc bb cd 94 cc aa cc 9d cd 9a cc 96 cc 9c cc ae cc 9e cc a5 cc a9 cc bc cc af cc ac cc ba cc a6 cd 89 cc 96 cc ad cc a5 cc ab cc 9d cc aa cd 88 cc 9f cc bc cc ba cd 95 cc ac cc 99 cc b0 cc a0 cc b3 cd 88 cd 87 cc b0 cc b9 cc b3 cc 9d cd 8e cc a9 cc ab cc b1 cd 94 cc b0 cc a6 cc aa cc a6 cc a3 cc 97 cd 96 cc a6 cc ae cc a6 cd 95 cc 9c cc a6 cd 96 cc aa cc 97 cc ba cd 89 cc ae cc b9 cc 97 cc 9d cd 96 cc ba cc b2 cc a5 cd 93 cc bb cc a3 cc 9e cd 95 cc 97 cc b1 cc bb cd 99 cc aa cc a5 cc 9c cc a5 cc bb cc 97 cc 99 cd 88 cc 9f cc 99 cc aa cd 95 cc 98 cc bb cc 99 cc a5 cc a6 cc a3 cc 9f cd 89 cc b1 cd 96 cc ab cd 93 cd 94 cd 94 cd 95 cc bc cd 9a cd 8e cc b1 cc ad cd 8d cc 96 cd 96 cd 8d cd 95 cc 97 cc bb cc 97 cc 96 cc b1 cc bc cc b2 cc 9c cd 96 cc b2 cc 98 cc 98 cc a4 cc 99 cc a0 cd 96 cd 99 cc bc cc ae cc 9f cc 97 cd 93 cd 8e cd 99 cd 93 cd 88 cc ad cc a9 cc ba cc af cc ac cd 93 cd 96 cd 93 cc b2 cc aa cc b9 cc b2 cc b2 cc ad cc a0 cc 98 cc b0 cc b0 cc 9d cd 96 cc 99 cc af cc aa cc ba cc b3 cc ae cc a5 cd 87 cc b9 cc aa cc 97 cc af cc ad cd 9a cc 96 cc 98 cc 9e cc ba cc a5 cc aa cc b3 cd 8e cc a6 cd 95 cc bc cd 95 cc a0 cc a5 cc a4 cc 96 cd 8e cc a3 cd 95 cc 9f cd 87 cc 9f cc a3 cd 8d cc bc cc a9 cc b2 cc 99 cc af cd 87 cc a5 cc ae cc ad cd 8d cc 9d cd 87 cd 99 cd 8d cd 99 cd 96 cc 9e cd 88 cc a3 cc a6 cc ad cc 96 cc a0 cd 93 cc af cc ab cc 9f cc 99 cc a5 cc a6 cc 97 cc a5 cc bb cd 8e cd 88 cd 87 cc 9d cc b1 cc ad cd 89 cc ab cd 9a cc 98 cd 9a cd 8d cd 89 cd 94 cc 99 cc a9 cc bc cc b0 cd 99 cc 99 cc 99 cc ad cc 9f cc 97 cc 9f cc aa cc 9e cc a3 cc bb cc 96 cc 99 cd 99 cc 98 cd 8e cc a9 cc a0 cd 94 cc a3 cc b0 cc 9c cc ac cc b3 cc 9c cc a6 cc ae cc a0 cc b9 cc 9d cc a5 cd 99 cc b2 cc bc cd 99 cc ad cc 9c cc b0 cc 9c cc b2 cd 99 cc 9d cc a9 cc bb cc ae cc ac cd 96 cc a6 cd 88 cc a3 cc 9f cc ba cc ae cd 88 cd 89 cd 99 cd 87 cd 94 cc 9e cc a9 cc b0 cc a3 cc 9f cc ab cc af cc a0 cc ab cd 96 cc 99 cc a9 cc ba cc 9e cd 88 cc 9d cc a5 cc a9 cd 96 cc b1 cd 88 cc 9e cc b2 cd 87 cd 93 cc ac cd 9a cc 9f cd 96 cd 94 cc a6 cd 99 cc 9e cc 9e cc ab cd 88 cc a0 cc ab cd 96 cc 9e cd 94 cc b9 cd 96 cc bc cc b2 cc a5 cd 94 cc 98 cc 9c cc a6 cc 96 cc 9d cc aa cc ab cd 96 cc ab cc ab cc 9d cd 99 cc ac cc a9 cd 96 cc ac cd 8e cc 97 cc b2 cc a3 cc ab cd 95 cd 8e cd 95 cc bc cc ae cc b1 cd 9a cc 85 cc 8f cc 8d cd 9b cd 86 cc 8d cc 88 cc 81 cc 81 cc bd cc be cc 94 cd 82 cc 93 cd 8b cd 8b cc 8a cd 86 cc 8d cd 82 cc 83 cc 85 cc 91 cc 8b cc 8c cc 8c cc 88 cc 81 cc 88 cc 91 cd 86 cc 81 cc 84 cc 8e cc 8e cc 89 cc 90 cc 90 cc 81 cc 89 cc 8b cc 8c cc 88 cc 81 cc 94 cc 88 cc 81 cd 8b cc 86 cd 8b cc 93 cc 93 cd 90 cc 88 cc 81 cc 80 cd 90 cd 9b cc 88 cc 81 cc 94 cd 9b cd 92 cc 88 cc 8c cd 97 cc 93 cc 82 cd 8b cc 89 cc 8a cc 90 cc 80 cc 89 cc bd cc bd cd 90 cc 90 cc 88 cc bd cd 97 cc 88 cc 81 cc 88 cc 81 cc 8f cc 85 cd 91 cd 90 cc 81 cd 91 cc 8e cc bd cc bf cc 88 cc 88 cc 83 cd 92 cc be cd 8c cd 8b cc 8f cd 8b cc 89 cd 86 cd 8c cc 8f cc 87 cc 88 cc 86 cc 87 cc 80 cc 85 cd 90 cc 83 cc 85 cc 82 cd 90 cd 86 cc 85 cc 93 cc 93 cc 90 cd 92 cd 86 cd 9b cc 88 cc 81 cc bf cc 80 cc 89 cd 86 cd 90 cc 8a cc 93 cc 87 cc 8c cc 88 cc 81 cd 91 cc bd cd 8c cc 80 cc 8e cd 90 cd 8a cc 82 cc 89 cc 93 cc 87 cd 90 cd 8a cc 82 cd 9b cc 8f cc 94 cc 93 cd 8b cd 9b cc 86 cc 88 cc 80 cc 87 cc 90 cc bd cd 82 cc 8f cd 8b cc 93 cc 82 cc 85 cd 90 cc 94 cd 8c cd 86 cd 92 cc 89 cc 8c cc 88 cc 81 cc 89 cc 80 cc 8b cc 80 cc 80 cd 8c cc 82 cc 88 cc 81 cd 8b cc 80 cc 88 cc 81 cc 93 cc 8a cc 86 cd 8c cc 84 cc 8c cc 8f cc 81 cc 82 cd 8a cd 82 cd 9b cc 80 cd 90 cc 8c cd 8b cc 88 cc 81 cc 86 cc 88 cc 81 cc 88 cc 81 cd 97 cc 80 cc 93 cc 8b cd 9b cd 92 cd 9b cc bf cc be cd 82 cc 8f cc be cd 86 cd 90 cc 8d cc 94 cd 86 cc 88 cd 91 cc 86 cc 86 cc 90 cc 90 cc be cc bf cc 8c cc 83 cc 88 cc 81 cc 85 cd 86 cc 83 cc 94 cc 88 cc 8c cd 86 cd 91 cc 83 cd 86 cc 90 cd 8b cc 93 cc 88 cc 81 cc 81 cc 8e cd 92 cc 8e cd 92 cc 8e cc bd cc 81 cc 87 cc 8e cd 92 cc 8d cc 88 cc 81 cc 83 cc 92 cc 93 cc 80 cc be cc 8c cd 8c cc 89 cd 8a cc be cd 90 cc 84 cc 88 cc 81 cc bf cc 92 cc 87 cc 8c cd 90 cc 91 cc bd cc 8d cd 97 cd 8c cd 9b cc 94 cc 8b cd 86 cd 92 cc 87 cd 82 cc 93 cd 90 cc 80 cc 94 cc 8f cc 86 cc 82 cd 90 cc 8e cc 88 cc 81 cc 8a cd 92 cc 91 cd 90 cc 8e cc 83 cc 88 cd 92 cc 8e cc 8a cc 82 cd 91 cc 8b cc 8f cc 92 cc 89 cc 90 cd 8a cc 8c cc 84 cc 85 cc be cc 80 cc 80 cc 8b cc 81 cc 90 cc 8a cc bd cc 91 cd 82 cc 93 cc 84 cc 8a cc 84 cd 8c cc 93 cc 8b cd 82 cc 8c cc 92 cc 85 cc 90 cd 8c cd 91 cc 80 cd 90 cd 90 cc 89 cc 8e cc 93 cd 82 cd 92 cc 84 cd 8c cd 8c cd 97 cc 82 cc 92 cc 91 cc 8c cd 92 cd 97 cc 90 cc 84 cc 8b cd 82 cc 93 cd 8a cc 8d cc 8f cc 91 cd 82 cc 90 cc 88 cc 81 cd 82 cc 86 cd 86 cd 90 cc bd cc 88 cc 81 cc 91 cd 8c cc bf cd 9b cc 85 cc 87 cc 80 cc 87 cd 97 cc 81 cd 91 cc 89 cc 82 cd 91 cd 97 cc 91 cd 91 cd 8b cc 87 cc 88 cc 81 cd 92 cd 82 cc 8d cc 93 cc 8a cd 9b cd 9b cd 9b cc 94 cc 94 cc 80 cc 85 cc 80 cd 86 cc 8d cc bf cc 92 cc 90 cd 8b cc 94 cd 9b cc 94 cc 88 cc 81 cc 83 cd 8a cd 90 cc bf cc 8b cd 97 cc 81 cc 8c cd 90 cd 91 cd 82 cc 93 cc 8a cc 8f cc 86 cc bf cc 88 cc 81 cc 88 cc 81 cc 80 cd 97 cc 94 cd 82 cc 88 cc 81 cc 85 cc 84 cd 9b cd 97 cc bd cc 81 cc 81 cc 94 cc 89 cc 85 cc 94 cc 81 cc 82 cd 92 cc 80 cc 85 cc 8c cd 91 cc 87 cd 86 cc be cd 86 cc 93 cc 94 cc 91 cd 92 cc 83 cc 84 cc 8f cd 82 cc 8e cc 80 cc 8a cc 92 cd 8c cc bf cc 92 cc 92 cc 8b cc 85 cc 82 cc 90 cc 92 cc 85 cd 91 cc 8b cd 8a cc 87 cc 93 cc 8a cd 86 cc 84 cc 80 cd 8c cd 86 cc 8b cc 82 cc 85 cc 88 cc 81 cd 92 cc 88 cc 8c cd 8c cc 88 cc 81 cc 8d cc be cc 8f cc 93 cd 86 cc be cc 8d cd 8a cc bd cc 80 cc 8c cc 8b cc 85 cc 8f cd 9b cc 8b cc 80 cc 89 cc 8e cc bd cc bf cc 8d cd 8c cd 82 cc 8b cc 81 cd 97 cc be cd 8c cd 92 cc 81 cc 89 cc 85 cc 88 cc 81 cd 90 cc 90 cc 86 cd 86 cc 81 cc 8b cc 90 cc 8f cc 82 cc 90 cd 8b cc 89 cc 92 cc 8f cc 90 cd 97 cc 89 cd 90 cc 89 cc 90 cc 8f cc 91 cc 85 cc 82 cc 86 cc 94 cc 80 cc bd cc bf cc 82 cc bd cc 8f cd 9b cd 8a cc 92 cc 82 cc 8c cc 93 cc 82 cd 92 cc 83 cc 90 cc 93 cc 94 cc 83 cc 81 cc 81 cc 88 cc 81 cc 93 cd 90 cc 8c cd 8c cc bd cd 8c cc 91 cc bf cc 94 cc 85 cc 81 cc bd cc 82 cc 94 cc 90 cc 82 cc 88 cc 81 cd 90 cc 82 cd 92 cc 8d cc 8d cc 89 cc 93 cc bd cc 8e cc 94 cc 90 cd 9b cc 8e cc 80 cd 82 cc 81 cc bf cc 80 cc 91 cc 87 cd 82 cc 8a cc 86 cd 8b cc 93 cd 8a cc 90 cc bd cc 88 cc 81 cd 82 cc 81 cc 85 cc 92 cc 8f cc 94 cc be cc 88 cc 81 cc 87 cc 88 cc 83 cc 93 cc bf cc 83 cc 88 cc 83 cc 80 cc 82 cd 8b cc bf cc bf cd 8c cc 8f cc 89 cc 8b cc 86 cc 90 cc 83 cc 83 cc 81 cc 83 cc 80 cc 92 cd 9b cc 89 cc 82 cc 93 cc be cc 83 cc 8f cd 9b cd 8a cc 85 cc 88 cc 81 cc 84 cc 80 cc 81 cc 8c cc 93 cd 8c cd 82 cc 8c cc 8f cc 86 cd 8b cc 8b cc be cc 91 cc 8f cd 91 cd 97 cc bf cc bd cc bd cc 89 cc 8e cc 91 cc 82 cc 93 cc 88 cc 82 cc 83 cc 87 cc 81 cc 90 cc 8b cc 88 cc be cc 93 cc 87 cc 86 cd 9b cc 91 cd 8a cc 8f cc 93 cc 86 cc 8a cc 8b cc 91 cd 9b cc 93 cc 80 cc 89 cd 8c cc bd cc 93 cc 8d cc 88 cc 81 cc 8f cd 82 cc 88 cc 81 cc 94 cc 93 cc 91 cd 8c cc 81 cc 90 cd 92 cc 85 cc 83 cd 86 cd 86 cc 8c cd 91 cd 86 cd 86 cc 85 cc 88 cc 81 cd 8a cc 84 cd 8b cc 85 cc 8a cc 81 cc 8d cc 85 cd 8b cc 80 cc 93 cd 97 cc 84 cc 84 cc 8c cc 94 cc 85 cd 82 cc 88 cc 81 cd 82 cc 86 cc 83 cc 8c cd 8a cc 94 cc 93 cc 8a cc 80 cc 86 cc 92 cc 85 cc 83 cc 94 cc 8e cc 92 cd 86 cc 8c cc 88 cc 88 cc 81 cc 88 cc bf cd 90 cc 91 cc 81 cc 8a cc 92 cc 93 cc 90 cc 80 cc 8e cc 80 cc 88 cc 81 cc be cc 80 cc 81 cc bd cc 8b cc 8a cc 81 cd 91 cc 94 cd 91 cc 8f cd 91 cd 8b cc 8a cd 90 cd 97 cc 8d cc 88 cc 94 cd 8c cd 91 cc 85 cd 86 cc bd cd 8b cc be cc 85 cd 86 cc bf cc 88 cc 82 cc 80 cc bd cd 92 cc 94 cc 8c cd 86 cc 84 cc 81 cc be cd 8a cc 8c cc 87 cd 91 cc 80 cd 91 cc 82 cc 90 cc be cc 92 cc bf cc 88 cc 81 cd 86 cc 80 cc 94 cc 88 cc 81 cc 88 cc 81 cc 83 cc 88 cc 81 cd 92 cd 82 cc 88 cc 81 cc 80 cd 82 cc 88 cc 8b cd 91 cc 81 cc 80 cc 87 cc 92 cc 90 cc 80 cc 85 cc bf cc 93 cd 8b cd 8a cc 8f cd 8a cd 8c cd 9b cc 88 cc 81 cd 82 cc 88 cc 81 cc 90 cd 97 cc 85 cd 9b cc 8c cc 90 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cd 97 cc 88 cc 81 cc 88 cc 94 cc 87 cd 90 cc 93 cc 93 cc 8f cd 8a cd 8a cc 94 cc 85 cc 88 cc 8a cc 89 cc 93 cc 87 cd 8c cc 80 cc 8a cc 8e cc 84 cc 91 cc 88 cc 8e cc 8e cc 94 cc 88 cc 81 cd 8b cc 8d cd 97 cc 81 cc 85 cc 88 cc 81 cc 88 cc 81 cc 8d cd 9b cc 8a cc bf cc 94 cd 8a cd 90 cd 86 cc 8d cc 88 cc 94 cc 8c cc 92 cc 88 cc 91 cc 89 cc 91 cc 80 cc 80 cc 82 cc 8e cc 8c cc 85 cd 8c cc 81 cc 8e cc 8a cd 90 cc 8f cc 8a cc 80 cc 89 cd 8b cc 81 cc 91 cc 88 cc 81 cc 8d cc 88 cc 81 cc 80 cc bf cc 80 cc 93 cc 8a cc 93 cc 93 cc 82 cd 8b cc 90 cc 92 cc 8a cc 92 cc bd cd 92 cd 90 cc 80 cc be cd 8c cc 87 cc be cd 92 cc 92 cc 83 cc 8e cc 8f cc 92 cd 91 cc 87 cc 86 cc 90 cc 93 cd 91 cc 87 cc 8d cd 8a cd 9b cd 8c cc 83 cc 88 cc 81 cc 8c cc bf cc 89 cd 86 cc bd cc 88 cc 81 cc 8c cc 93 cc 8b cd 86 cc 87 cd 92 cd 9b cc 89 cc 91 cc 93 cd 90 cc 80 cc 80 cc 85 cc bf cc 87 cc 8f cd 8b cc 80 cd 91 cc 92 cc 8c cc 8f cc 8f cd 8a cc 90 cd 92 cc 88 cc 84 cc 85 cd 82 cc 8e cc 93 cd 97 cc 8a cd 86 cd 91 cc 81 cc 8d cc 8d cc 8b cd 8b cc be cd 90 cc 93 cc 82 cc 80 cc 8a cc 81 cc 84 cc 92 cc 84 cc 85 cc 91 cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cd 8c cc 86 cc 94 cc 82 cd 97 cc 93 cc 8c cc 90 cc 81 cc 88 cc 8e cc be cc 88 cc 81 cc 80 cc 91 cd 9b cc 8d cc 81 cc 84 cc 88 cc 81 cc 81 cc 93 cc 80 cc 84 cc 91 cc 86 cd 8b cd 92 cd 9b cd 8c cc 8e cc 93 cd 92 cc 80 cd 92 cc 80 cd 90 cc 8a cc 8a cc 86 cc 80 cd 82 cc 93 cc 94 cd 9b cd 97 cc 8d cd 86 cc 85 cc 94 cc 80 cc 81 cc 93 cc 8c cd 90 cc 90 cc 93 cc 89 cc 81 cc 91 cc 81 cd 92 cc bd cc 8f cc 94 cc 83 cd 8a cc bd cc 8c cd 97 cc 81 cc 83 cc 90 cc 80 cd 86 cc 88 cc 81 cc 82 cc 87 cd 8b cc 88 cc 86 cc 8b cc 8b cc 8d cc 88 cc 81 cc 8d cc 91 cd 82 cc 81 cc 81 cd 9b cc 89 cc 82 cc bf cc 93 cc 89 cc bf cc bd cc 8e cc bd cc 93 cc 8f cd 9b cc 83 cd 92 cc 80 cc 93 cc 90 cc 81 cd 90 cc bf cc 8c cc 85 cc 85 cc 90 cd 90 cd 86 cd 9b cc 88 cc 93 cc 88 cd 8c cc 8e cc 85 cc bd cc 8c cd 8b cd 9b cc 8f cc 80 cc 8e cc 8d cc 90 cd 9b cc bd cc 85 cc bf cc 88 cc 91 cd 90 cc 91 cd 8a cc 8d cc 8f cc 83 cc 90 cc 8e cc 80 cc 8a cc 8d cd 91 cc 87 cc 88 cc 81 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc 85 cc 89 cc 82 cc 93 cc 88 cc 81 cc 8f cc 8b cd 92 cc bd cd 86 cc 8c cc 88 cc 81 cc 8b cd 9b cc be cd 8b cc 90 cc 8e cc 89 cc 87 cd 8b cc 8c cc 81 cc bd cc bd cc 88 cc bd cd 86 cd 9b cc 83 cc 80 cc 84 cc 91 cd 86 cc 84 cc 93 cc 88 cc 93 cd 97 cc 80 cc 94 cc 8f cc 86 cd 8a cc 88 cc 81 cd 86 cc 80 cc bd cc 93 cc 8d cc 81 cc 84 cc 8a cd 91 cc 88 cc 81 cd 86 cd 86 cc 85 cd 9b cc 81 cc 82 cc 83 cc 8f cc 89 cc 88 cc 81 cc 94 cc 88 cc 93 cc 80 cc 88 cc 81 cc 84 cc 84 cd 8a cc 86 cc bd cc 90 cd 92 cd 91 cc 88 cc 81 cd 91 cc bf cc 8f cc bd cc 93 cc 80 cc 8a cc 81 cc 8a cc 81 cc 8f cc 81 cc 88 cc 81 cc 82 cc 92 cc 80 cc be cc 81 cd 91 cc 81 cc 92 cd 92 cc 84 cc 8e cc 92 cc 8b cd 91 cc 86 cc 87 cc 8b cd 86 cc 90 cc 80 cc bd cc 8c cd 9b cc 8f cc 93 cc 84 cd 90 cd 86 cd 91 cc 93 cc 8e cc bd cc bf cc bf cc 88 cc 81 cc 88 cc 81 cc 87 cc 89 cd 90 cc 81 cd 86 cd 8c cd 8c cc 86 cd 9b cc 8a cd 86 cc 93 cc 8f cc bd cd 92 cd 86 cd 8c cd 82 cd 8a cc be cc 93 cd 8b cd 8b cc bf cc 8b cc 88 cc 81 cc 88 cd 90 cc 93 cc 91 cc 90 cc 83 cd 9b cd 8b cc 88 cc 81 cc 81 cc 83 cc 89 cc 8f cc 93 cc 82 cc 8b cc 93 cc 8c cc 88 cc 81 cd 9b cd 9b cc 91 cd 82 cc 89 cd 8b cc 83 cc bd cd 97 cc 81 cc 92 cc 80 cc 93 cc 94 cc 85 cc 8b cc 81 cc 88 cc 81 cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc 88 cc 81 cc 8c cd 90 cc 8d cc 85 cc 83 cc 88 cc 81 cc bf cc 80 cc 84 cc 91 cc 83 cc 88 cc 81 cc 82 cc 86 cc 87 cd 82 cc 92 cc 88 cc 91 cc 81 cc 8e cd 97 cc 84 cc be cc bf cd 82 cc 91 cc 81 cd 91 cc 88 cc 81 cc 8c cd 8c cc 8f cd 91 cc 80 cc 89 cc bd cc 90 cc bf cc 8f cc 8e cc 8f cc 92 cc 80 cc 81 cc 82 cc 81 cc 87 cc 94 cc 81 cc 8c cc be cd 97 cc 88 cc 82 cc 8e cd 86 cc 84 cc 80 cc 8e cc 91 cc 8c cc 84 cc 8d cc 94 cc 81 cc 80 cc 8c cc 83 cc 88 cc 86 cc 89 cc 8a cc 84 cc 92 cc 89 cc 82 cd 8b cd 9b cc 88 cc 81 cc 83 cc 92 cc 81 cc 83 cd 8b cc 81 cc 92 cd 9b cc 8a cd 97 cc 8c cc 84 cc 93 cc 94 cc 85 cc 81 cc 8b cd 8a cd 97 cd 92 cc 85 cc be cd 97 cc 92 cd 92 cc be cc 86 cc 8b cd 97 cc 94 cc 90 cc 93 cd 8b cc 85 cd 92 cc 8d cd 82 cc 8f cc 87 cd 8c cd 8b cd 90 cc 81 cc 93 cc 93 cc 93 cc 8b cc 8a cc 82 cd 82 cc 80 cc 80 cc 8f cc 89 cd 8c cc 88 cc 93 41 69 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc 8e cc 88 cc 81 cc 85 cc 84 cc 8c cc 92 cd 86 cc 91 cc 91 cc 8d cc 80 cc be cc 92 cc 8b cd 92 cc 80 cd 82 cc 90 cc 86 cc 86 cd 91 cc 91 cc 93 cd 98 cc 9a cd 98 cc 95 cd 98 cd 98 cc 9a cc 9a cd 98 cd 98 cc 95 cd 98 cc 9a cd 98 cc 95 cc 95 cc 9a cc 9a cc 9a cc 95 cc 95 cc 9a cd 98 cd 98 cc 95 cc 95 cc 9a cd 98 cd 98 cd 98 cc 95 cc 9a cc 9a cc 9a cc 95 cd 98 cc 95 cc 95 cd 98 cc 95 cc 95 cd 98 cd 98 cc 95 cc 95 cd 98 cc 9a cc 95 cc 95 cc 95 cc 9a cc 9a cd 98 cc 9a cc 95 cd 98 cc 95 cd 98 cc 95 cd 98 cc 9a cd 98 cc 9a cc 95 cc 9a cd 98 cc 95 cd 98 cc 9a cc 9a cc 95 cc 95 cc 9a cc 95 cc 9a cc 9a cd 98 cd 98 cc 95 cd 98 cc 9a cd 98 cc 95 cd 98 cd 98 cd 98 cc 9a cc 9a cd 98 cd 98 cd 98 cd 98 cd 98 cd 98 cc 95 cc 9a cd 98 cc 9a cc 9a cc 9a cd 98 cc 9a cd 98 cc 95 cc 9a cc 95 cc 9a cc 95 cd 98 cc 9a cd 98 cd 98 cc 95 cc 9a cc 95 cd 98 cc 95 cd 98 cc 95 cd 98 cc 9a cc 9a cd 98 cc 9a cd 98 cd 98 cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd a0 cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd a0 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc bb cc 9c cc a4 cc ac cc b1 cd 95 cd 94 cd 8d cd 94 cd 8e cc a5 cd 96 cc 98 cc a3 cc ad cc ad cc 9e cc b2 cd 88 cd 9a cc 9f cc 98 cd 87 cd 95 cc a3 cc ab cc 9f cd 96 cc b0 cc ae cd 95 cc a3 cc ae cc a5 cd 95 cc b0 cc 9d cd 96 cd 87 cc b1 cc 99 cc 9e cc 9d cd 96 cd 8d cd 99 cc ba cd 93 cc 9f cc b9 cc aa cc b3 cc b3 cc 98 cc 96 cc ab cc a6 cc 9e cc 9c cd 8e cc 99 cc 9d cc b0 cc a3 cc a0 cc af cc 99 cd 9a cc 9e cc ab cd 8d cc 97 cc a6 cc b9 cc a3 cc a5 cc 9e cc b3 cc 99 cd 89 cc a9 cc a5 cd 93 cc a6 cc af cd 8d cd 93 cc 9d cc ab cd 93 cc b0 cc b0 cc a0 cd 93 cc 9f cd 94 cc b0 cc a0 cc 9c cd 87 cc b1 cc 96 cc a4 cc a5 cc 98 cc b1 cc b1 cd 88 cd 88 cd 8e cd 89 cc a5 cc 9d cd 88 cc aa cc b3 cc bb cd 95 cd 94 cd 87 cc 9c cc b1 cc ac cc 99 cc b2 cc b0 cc ae cd 88 cc 9c cd 8d cc a5 cc a5 cc 99 cc a4 cc 97 cd 96 cd 87 cd 95 cc a0 cc ae cc 97 cc 9f cc 9f cd 8d cd 95 cc af cc a0 cd 8d cd 89 cc 99 cc 98 cc b2 cd 8e cc b1 cd 8d cc ad cc b1 cc b3 cc 99 cc a6 cc bb cd 87 cc af cc a0 cc b3 cd 94 cc ab cc b0 cc ae cd 89 cc a0 cc 97 cc aa cc af cc a6 cc a4 cc a6 cc a0 cd 87 cd 8e cc b1 cd 89 cc a9 cd 95 cc af cc ae cc af cc a3 cc a0 cc 9d cd 9a cc 97 cc b2 cc 9f cc ba cd 9a cd 93 cd 8d cd 94 cc b0 cd 94 cc b9 cd 88 cc ab cc bb cc aa cc 99 cd 87 cc b2 cc a6 cd 8d cc b9 cc a3 cc 9e cc ab cc bb cd 8e cc b3 cc a5 cd 9a cc a4 cc ae cc b9 cc ad cc 99 cd 87 cc a5 cc aa cd 8e cc a0 cd 89 cc 98 cc ba cd 94 cd 95 cc 99 cc 96 cd 94 cd 89 cc a3 cd 95 cc a9 cd 99 cc 9d cd 95 cc b3 cc bb cd 95 cd 9a cd 89 cc bc cd 96 cc b2 cc ae cd 94 cc b9 cc 97 cc 97 cd 88 cd 93 cd 8e cc 9c cc aa cc 9c cc a9 cc ad cd 8d cd 8e cc a5 cc 9e cc ad cd 99 cc a5 cd 89 cc b2 cc ad cc b1 cc ba cc af cd 8d cc aa cd 8d cc b3 cd 93 cc 96 cc 99 cd 99 cc 98 cc b0 cc a6 cc a4 cd 87 cc ad cc 98 cd 8d cc ba cc 99 cc aa cd 96 cc ae cc af cc b9 cc a9 cc a5 cc 96 cc ba cc b1 cd 87 cc 98 cc b1 cd 8e cc a3 cc 9f cd 8e cc b3 cc 97 cc ac cc b0 cc b1 cc bb cc ab cc bc cc a4 cc 96 cc b3 cd 89 cc bc cc a6 cc bb cc ae cc ba cc a3 cc ad cd 89 cc 96 cc af cc b0 cc 9f cd 96 cc b2 cc 99 cc 98 cc a3 cd 88 cd 94 cd 8d cc 9e cc 96 cc 9f cc 9f cc af cc b1 cc 9d cc a0 cc 9c cd 8e cd 89 cc bb cc 98 cd 99 cd 8d cc 9f cd 93 cd 89 cc 99 cc ba cd 8d cd 9a cc 9e cc ae cd 8e cd 8e cc ae cc b0 cc a0 cc b2 cc ae cc ad cd 99 cc b2 cc a4 cc a9 cc ac cd 8d cc b0 cc 9f cd 99 cd 8d cd 8d cd 87 cc 96 cd 9a cd 93 cc bb cc af cc bb cc b0 cd 88 cd 95 cc b3 cd 94 cc a4 cd 8e cc 9d cc a3 cd 88 cc a9 cc a4 cd 88 cc ad cc af cc aa cc 9f cc bb cd 93 cc aa cd 99 cc bc cc ac cc a0 cc b9 cc 99 cc 96 cc ab cc b0 cc aa cc bb cc a6 cc a9 cc bb cc 9f cc a6 cd 96 cc b2 cc b0 cc 98 cc 9c cc a3 cc 96 cc a4 cd 99 cd 96 cd 8e cc bb cc a9 cd 8d cc a4 cc b1 cd 8d cc 99 cc ab cc ab cc 99 cd 96 cc a0 cc b2 cd 89 cc 97 cc b1 cc b0 cd 94 cc bb cc b3 cc a9 cd 99 cc b1 cd 88 cc a0 cd 87 cc af cd 9a cd 89 cc ae cc 98 cd 95 cd 89 cd 95 cd 9a cd 8e cc ae cc a6 cc ab cd 87 cc 99 cc a5 cc af cc b3 cd 96 cc 9c cc b3 cc bb cd 94 cc aa cc 9d cd 9a cc 96 cc 9c cc ae cc 9e cc a5 cc a9 cc bc cc af cc ac cc ba cc a6 cd 89 cc 96 cc ad cc a5 cc ab cc 9d cc aa cd 88 cc 9f cc bc cc ba cd 95 cc ac cc 99 cc b0 cc a0 cc b3 cd 88 cd 87 cc b0 cc b9 cc b3 cc 9d cd 8e cc a9 cc ab cc b1 cd 94 cc b0 cc a6 cc aa cc a6 cc a3 cc 97 cd 96 cc a6 cc ae cc a6 cd 95 cc 9c cc a6 cd 96 cc aa cc 97 cc ba cd 89 cc ae cc b9 cc 97 cc 9d cd 96 cc ba cc b2 cc a5 cd 93 cc bb cc a3 cc 9e cd 95 cc 97 cc b1 cc bb cd 99 cc aa cc a5 cc 9c cc a5 cc bb cc 97 cc 99 cd 88 cc 9f cc 99 cc aa cd 95 cc 98 cc bb cc 99 cc a5 cc a6 cc a3 cc 9f cd 89 cc b1 cd 96 cc ab cd 93 cd 94 cd 94 cd 95 cc bc cd 9a cd 8e cc b1 cc ad cd 8d cc 96 cd 96 cd 8d cd 95 cc 97 cc bb cc 97 cc 96 cc b1 cc bc cc b2 cc 9c cd 96 cc b2 cc 98 cc 98 cc a4 cc 99 cc a0 cd 96 cd 99 cc bc cc ae cc 9f cc 97 cd 93 cd 8e cd 99 cd 93 cd 88 cc ad cc a9 cc ba cc af cc ac cd 93 cd 96 cd 93 cc b2 cc aa cc b9 cc b2 cc b2 cc ad cc a0 cc 98 cc b0 cc b0 cc 9d cd 96 cc 99 cc af cc aa cc ba cc b3 cc ae cc a5 cd 87 cc b9 cc aa cc 97 cc af cc ad cd 9a cc 96 cc 98 cc 9e cc ba cc a5 cc aa cc b3 cd 8e cc a6 cd 95 cc bc cd 95 cc a0 cc a5 cc a4 cc 96 cd 8e cc a3 cd 95 cc 9f cd 87 cc 9f cc a3 cd 8d cc bc cc a9 cc b2 cc 99 cc af cd 87 cc a5 cc ae cc ad cd 8d cc 9d cd 87 cd 99 cd 8d cd 99 cd 96 cc 9e cd 88 cc a3 cc a6 cc ad cc 96 cc a0 cd 93 cc af cc ab cc 9f cc 99 cc a5 cc a6 cc 97 cc a5 cc bb cd 8e cd 88 cd 87 cc 9d cc b1 cc ad cd 89 cc ab cd 9a cc 98 cd 9a cd 8d cd 89 cd 94 cc 99 cc a9 cc bc cc b0 cd 99 cc 99 cc 99 cc ad cc 9f cc 97 cc 9f cc aa cc 9e cc a3 cc bb cc 96 cc 99 cd 99 cc 98 cd 8e cc a9 cc a0 cd 94 cc a3 cc b0 cc 9c cc ac cc b3 cc 9c cc a6 cc ae cc a0 cc b9 cc 9d cc a5 cd 99 cc b2 cc bc cd 99 cc ad cc 9c cc b0 cc 9c cc b2 cd 99 cc 9d cc a9 cc bb cc ae cc ac cd 96 cc a6 cd 88 cc a3 cc 9f cc ba cc ae cd 88 cd 89 cd 99 cd 87 cd 94 cc 9e cc a9 cc b0 cc a3 cc 9f cc ab cc af cc a0 cc ab cd 96 cc 99 cc a9 cc ba cc 9e cd 88 cc 9d cc a5 cc a9 cd 96 cc b1 cd 88 cc 9e cc b2 cd 87 cd 93 cc ac cd 9a cc 9f cd 96 cd 94 cc a6 cd 99 cc 9e cc 9e cc ab cd 88 cc a0 cc ab cd 96 cc 9e cd 94 cc b9 cd 96 cc bc cc b2 cc a5 cd 94 cc 98 cc 9c cc a6 cc 96 cc 9d cc aa cc ab cd 96 cc ab cc ab cc 9d cd 99 cc ac cc a9 cd 96 cc ac cd 8e cc 97 cc b2 cc a3 cc ab cd 95 cd 8e cd 95 cc bc cc ae cc b1 cd 9a cc 85 cc 8f cc 8d cd 9b cd 86 cc 8d cc 88 cc 81 cc 81 cc bd cc be cc 94 cd 82 cc 93 cd 8b cd 8b cc 8a cd 86 cc 8d cd 82 cc 83 cc 85 cc 91 cc 8b cc 8c cc 8c cc 88 cc 81 cc 88 cc 91 cd 86 cc 81 cc 84 cc 8e cc 8e cc 89 cc 90 cc 90 cc 81 cc 89 cc 8b cc 8c cc 88 cc 81 cc 94 cc 88 cc 81 cd 8b cc 86 cd 8b cc 93 cc 93 cd 90 cc 88 cc 81 cc 80 cd 90 cd 9b cc 88 cc 81 cc 94 cd 9b cd 92 cc 88 cc 8c cd 97 cc 93 cc 82 cd 8b cc 89 cc 8a cc 90 cc 80 cc 89 cc bd cc bd cd 90 cc 90 cc 88 cc bd cd 97 cc 88 cc 81 cc 88 cc 81 cc 8f cc 85 cd 91 cd 90 cc 81 cd 91 cc 8e cc bd cc bf cc 88 cc 88 cc 83 cd 92 cc be cd 8c cd 8b cc 8f cd 8b cc 89 cd 86 cd 8c cc 8f cc 87 cc 88 cc 86 cc 87 cc 80 cc 85 cd 90 cc 83 cc 85 cc 82 cd 90 cd 86 cc 85 cc 93 cc 93 cc 90 cd 92 cd 86 cd 9b cc 88 cc 81 cc bf cc 80 cc 89 cd 86 cd 90 cc 8a cc 93 cc 87 cc 8c cc 88 cc 81 cd 91 cc bd cd 8c cc 80 cc 8e cd 90 cd 8a cc 82 cc 89 cc 93 cc 87 cd 90 cd 8a cc 82 cd 9b cc 8f cc 94 cc 93 cd 8b cd 9b cc 86 cc 88 cc 80 cc 87 cc 90 cc bd cd 82 cc 8f cd 8b cc 93 cc 82 cc 85 cd 90 cc 94 cd 8c cd 86 cd 92 cc 89 cc 8c cc 88 cc 81 cc 89 cc 80 cc 8b cc 80 cc 80 cd 8c cc 82 cc 88 cc 81 cd 8b cc 80 cc 88 cc 81 cc 93 cc 8a cc 86 cd 8c cc 84 cc 8c cc 8f cc 81 cc 82 cd 8a cd 82 cd 9b cc 80 cd 90 cc 8c cd 8b cc 88 cc 81 cc 86 cc 88 cc 81 cc 88 cc 81 cd 97 cc 80 cc 93 cc 8b cd 9b cd 92 cd 9b cc bf cc be cd 82 cc 8f cc be cd 86 cd 90 cc 8d cc 94 cd 86 cc 88 cd 91 cc 86 cc 86 cc 90 cc 90 cc be cc bf cc 8c cc 83 cc 88 cc 81 cc 85 cd 86 cc 83 cc 94 cc 88 cc 8c cd 86 cd 91 cc 83 cd 86 cc 90 cd 8b cc 93 cc 88 cc 81 cc 81 cc 8e cd 92 cc 8e cd 92 cc 8e cc bd cc 81 cc 87 cc 8e cd 92 cc 8d cc 88 cc 81 cc 83 cc 92 cc 93 cc 80 cc be cc 8c cd 8c cc 89 cd 8a cc be cd 90 cc 84 cc 88 cc 81 cc bf cc 92 cc 87 cc 8c cd 90 cc 91 cc bd cc 8d cd 97 cd 8c cd 9b cc 94 cc 8b cd 86 cd 92 cc 87 cd 82 cc 93 cd 90 cc 80 cc 94 cc 8f cc 86 cc 82 cd 90 cc 8e cc 88 cc 81 cc 8a cd 92 cc 91 cd 90 cc 8e cc 83 cc 88 cd 92 cc 8e cc 8a cc 82 cd 91 cc 8b cc 8f cc 92 cc 89 cc 90 cd 8a cc 8c cc 84 cc 85 cc be cc 80 cc 80 cc 8b cc 81 cc 90 cc 8a cc bd cc 91 cd 82 cc 93 cc 84 cc 8a cc 84 cd 8c cc 93 cc 8b cd 82 cc 8c cc 92 cc 85 cc 90 cd 8c cd 91 cc 80 cd 90 cd 90 cc 89 cc 8e cc 93 cd 82 cd 92 cc 84 cd 8c cd 8c cd 97 cc 82 cc 92 cc 91 cc 8c cd 92 cd 97 cc 90 cc 84 cc 8b cd 82 cc 93 cd 8a cc 8d cc 8f cc 91 cd 82 cc 90 cc 88 cc 81 cd 82 cc 86 cd 86 cd 90 cc bd cc 88 cc 81 cc 91 cd 8c cc bf cd 9b cc 85 cc 87 cc 80 cc 87 cd 97 cc 81 cd 91 cc 89 cc 82 cd 91 cd 97 cc 91 cd 91 cd 8b cc 87 cc 88 cc 81 cd 92 cd 82 cc 8d cc 93 cc 8a cd 9b cd 9b cd 9b cc 94 cc 94 cc 80 cc 85 cc 80 cd 86 cc 8d cc bf cc 92 cc 90 cd 8b cc 94 cd 9b cc 94 cc 88 cc 81 cc 83 cd 8a cd 90 cc bf cc 8b cd 97 cc 81 cc 8c cd 90 cd 91 cd 82 cc 93 cc 8a cc 8f cc 86 cc bf cc 88 cc 81 cc 88 cc 81 cc 80 cd 97 cc 94 cd 82 cc 88 cc 81 cc 85 cc 84 cd 9b cd 97 cc bd cc 81 cc 81 cc 94 cc 89 cc 85 cc 94 cc 81 cc 82 cd 92 cc 80 cc 85 cc 8c cd 91 cc 87 cd 86 cc be cd 86 cc 93 cc 94 cc 91 cd 92 cc 83 cc 84 cc 8f cd 82 cc 8e cc 80 cc 8a cc 92 cd 8c cc bf cc 92 cc 92 cc 8b cc 85 cc 82 cc 90 cc 92 cc 85 cd 91 cc 8b cd 8a cc 87 cc 93 cc 8a cd 86 cc 84 cc 80 cd 8c cd 86 cc 8b cc 82 cc 85 cc 88 cc 81 cd 92 cc 88 cc 8c cd 8c cc 88 cc 81 cc 8d cc be cc 8f cc 93 cd 86 cc be cc 8d cd 8a cc bd cc 80 cc 8c cc 8b cc 85 cc 8f cd 9b cc 8b cc 80 cc 89 cc 8e cc bd cc bf cc 8d cd 8c cd 82 cc 8b cc 81 cd 97 cc be cd 8c cd 92 cc 81 cc 89 cc 85 cc 88 cc 81 cd 90 cc 90 cc 86 cd 86 cc 81 cc 8b cc 90 cc 8f cc 82 cc 90 cd 8b cc 89 cc 92 cc 8f cc 90 cd 97 cc 89 cd 90 cc 89 cc 90 cc 8f cc 91 cc 85 cc 82 cc 86 cc 94 cc 80 cc bd cc bf cc 82 cc bd cc 8f cd 9b cd 8a cc 92 cc 82 cc 8c cc 93 cc 82 cd 92 cc 83 cc 90 cc 93 cc 94 cc 83 cc 81 cc 81 cc 88 cc 81 cc 93 cd 90 cc 8c cd 8c cc bd cd 8c cc 91 cc bf cc 94 cc 85 cc 81 cc bd cc 82 cc 94 cc 90 cc 82 cc 88 cc 81 cd 90 cc 82 cd 92 cc 8d cc 8d cc 89 cc 93 cc bd cc 8e cc 94 cc 90 cd 9b cc 8e cc 80 cd 82 cc 81 cc bf cc 80 cc 91 cc 87 cd 82 cc 8a cc 86 cd 8b cc 93 cd 8a cc 90 cc bd cc 88 cc 81 cd 82 cc 81 cc 85 cc 92 cc 8f cc 94 cc be cc 88 cc 81 cc 87 cc 88 cc 83 cc 93 cc bf cc 83 cc 88 cc 83 cc 80 cc 82 cd 8b cc bf cc bf cd 8c cc 8f cc 89 cc 8b cc 86 cc 90 cc 83 cc 83 cc 81 cc 83 cc 80 cc 92 cd 9b cc 89 cc 82 cc 93 cc be cc 83 cc 8f cd 9b cd 8a cc 85 cc 88 cc 81 cc 84 cc 80 cc 81 cc 8c cc 93 cd 8c cd 82 cc 8c cc 8f cc 86 cd 8b cc 8b cc be cc 91 cc 8f cd 91 cd 97 cc bf cc bd cc bd cc 89 cc 8e cc 91 cc 82 cc 93 cc 88 cc 82 cc 83 cc 87 cc 81 cc 90 cc 8b cc 88 cc be cc 93 cc 87 cc 86 cd 9b cc 91 cd 8a cc 8f cc 93 cc 86 cc 8a cc 8b cc 91 cd 9b cc 93 cc 80 cc 89 cd 8c cc bd cc 93 cc 8d cc 88 cc 81 cc 8f cd 82 cc 88 cc 81 cc 94 cc 93 cc 91 cd 8c cc 81 cc 90 cd 92 cc 85 cc 83 cd 86 cd 86 cc 8c cd 91 cd 86 cd 86 cc 85 cc 88 cc 81 cd 8a cc 84 cd 8b cc 85 cc 8a cc 81 cc 8d cc 85 cd 8b cc 80 cc 93 cd 97 cc 84 cc 84 cc 8c cc 94 cc 85 cd 82 cc 88 cc 81 cd 82 cc 86 cc 83 cc 8c cd 8a cc 94 cc 93 cc 8a cc 80 cc 86 cc 92 cc 85 cc 83 cc 94 cc 8e cc 92 cd 86 cc 8c cc 88 cc 88 cc 81 cc 88 cc bf cd 90 cc 91 cc 81 cc 8a cc 92 cc 93 cc 90 cc 80 cc 8e cc 80 cc 88 cc 81 cc be cc 80 cc 81 cc bd cc 8b cc 8a cc 81 cd 91 cc 94 cd 91 cc 8f cd 91 cd 8b cc 8a cd 90 cd 97 cc 8d cc 88 cc 94 cd 8c cd 91 cc 85 cd 86 cc bd cd 8b cc be cc 85 cd 86 cc bf cc 88 cc 82 cc 80 cc bd cd 92 cc 94 cc 8c cd 86 cc 84 cc 81 cc be cd 8a cc 8c cc 87 cd 91 cc 80 cd 91 cc 82 cc 90 cc be cc 92 cc bf cc 88 cc 81 cd 86 cc 80 cc 94 cc 88 cc 81 cc 88 cc 81 cc 83 cc 88 cc 81 cd 92 cd 82 cc 88 cc 81 cc 80 cd 82 cc 88 cc 8b cd 91 cc 81 cc 80 cc 87 cc 92 cc 90 cc 80 cc 85 cc bf cc 93 cd 8b cd 8a cc 8f cd 8a cd 8c cd 9b cc 88 cc 81 cd 82 cc 88 cc 81 cc 90 cd 97 cc 85 cd 9b cc 8c cc 90 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cd 97 cc 88 cc 81 cc 88 cc 94 cc 87 cd 90 cc 93 cc 93 cc 8f cd 8a cd 8a cc 94 cc 85 cc 88 cc 8a cc 89 cc 93 cc 87 cd 8c cc 80 cc 8a cc 8e cc 84 cc 91 cc 88 cc 8e cc 8e cc 94 cc 88 cc 81 cd 8b cc 8d cd 97 cc 81 cc 85 cc 88 cc 81 cc 88 cc 81 cc 8d cd 9b cc 8a cc bf cc 94 cd 8a cd 90 cd 86 cc 8d cc 88 cc 94 cc 8c cc 92 cc 88 cc 91 cc 89 cc 91 cc 80 cc 80 cc 82 cc 8e cc 8c cc 85 cd 8c cc 81 cc 8e cc 8a cd 90 cc 8f cc 8a cc 80 cc 89 cd 8b cc 81 cc 91 cc 88 cc 81 cc 8d cc 88 cc 81 cc 80 cc bf cc 80 cc 93 cc 8a cc 93 cc 93 cc 82 cd 8b cc 90 cc 92 cc 8a cc 92 cc bd cd 92 cd 90 cc 80 cc be cd 8c cc 87 cc be cd 92 cc 92 cc 83 cc 8e cc 8f cc 92 cd 91 cc 87 cc 86 cc 90 cc 93 cd 91 cc 87 cc 8d cd 8a cd 9b cd 8c cc 83 cc 88 cc 81 cc 8c cc bf cc 89 cd 86 cc bd cc 88 cc 81 cc 8c cc 93 cc 8b cd 86 cc 87 cd 92 cd 9b cc 89 cc 91 cc 93 cd 90 cc 80 cc 80 cc 85 cc bf cc 87 cc 8f cd 8b cc 80 cd 91 cc 92 cc 8c cc 8f cc 8f cd 8a cc 90 cd 92 cc 88 cc 84 cc 85 cd 82 cc 8e cc 93 cd 97 cc 8a cd 86 cd 91 cc 81 cc 8d cc 8d cc 8b cd 8b cc be cd 90 cc 93 cc 82 cc 80 cc 8a cc 81 cc 84 cc 92 cc 84 cc 85 cc 91 cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cc 91 cc 91 cc 86 cc 80 cd 8a cc 87 cc 83 cc be cc 86 cc bf cd 8a cd 82 cd 90 cd 82 cc 83 cc 8e cc 82 cd 8a cc 87 cc be cc bf cc 92 cc 8a cc 94 cc 83 cc 89 cd 97 cc 84 cc 93 cd 97 cc 91 cc 82 cc 8f cc 93 cc bf cc 80 cd 86 cd 8a cc 90 cc 84 cc 80 cc 90 cc 88 cc 81 cc 8e cd 8c cc 90 cd 91 cd 97 cc 8c cd 90 cc 89 cc bf cd 97 cc 82 cc 88 cd 8c cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cd 8a cc 94 cd 8b cd 8c cc 88 cc 81 cd 8b cc be cc 88 cc 80 cd 8c cc 93 cc 82 cc bf cc 90 cd 91 cc 85 cc 8f cd 8c cc 86 cc 94 cc 82 cd 97 cc 93 cc 8c cc 90 cc 81 cc 88 cc 8e cc be cc 88 cc 81 cc 80 cc 91 cd 9b cc 8d cc 81 cc 84 cc 88 cc 81 cc 81 cc 93 cc 80 cc 84 cc 91 cc 86 cd 8b cd 92 cd 9b cd 8c cc 8e cc 93 cd 92 cc 80 cd 92 cc 80 cd 90 cc 8a cc 8a cc 86 cc 80 cd 82 cc 93 cc 94 cd 9b cd 97 cc 8d cd 86 cc 85 cc 94 cc 80 cc 81 cc 93 cc 8c cd 90 cc 90 cc 93 cc 89 cc 81 cc 91 cc 81 cd 92 cc bd cc 8f cc 94 cc 83 cd 8a cc bd cc 8c cd 97 cc 81 cc 83 cc 90 cc 80 cd 86 cc 88 cc 81 cc 82 cc 87 cd 8b cc 88 cc 86 cc 8b cc 8b cc 8d cc 88 cc 81 cc 8d cc 91 cd 82 cc 81 cc 81 cd 9b cc 89 cc 82 cc bf cc 93 cc 89 cc bf cc bd cc 8e cc bd cc 93 cc 8f cd 9b cc 83 cd 92 cc 80 cc 93 cc 90 cc 81 cd 90 cc bf cc 8c cc 85 cc 85 cc 90 cd 90 cd 86 cd 9b cc 88 cc 93 cc 88 cd 8c cc 8e cc 85 cc bd cc 8c cd 8b cd 9b cc 8f cc 80 cc 8e cc 8d cc 90 cd 9b cc bd cc 85 cc bf cc 88 cc 91 cd 90 cc 91 cd 8a cc 8d cc 8f cc 83 cc 90 cc 8e cc 80 cc 8a cc 8d cd 91 cc 87 cc 88 cc 81 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc 85 cc 89 cc 82 cc 93 cc 88 cc 81 cc 8f cc 8b cd 92 cc bd cd 86 cc 8c cc 88 cc 81 cc 8b cd 9b cc be cd 8b cc 90 cc 8e cc 89 cc 87 cd 8b cc 8c cc 81 cc bd cc bd cc 88 cc bd cd 86 cd 9b cc 83 cc 80 cc 84 cc 91 cd 86 cc 84 cc 93 cc 88 cc 93 cd 97 cc 80 cc 94 cc 8f cc 86 cd 8a cc 88 cc 81 cd 86 cc 80 cc bd cc 93 cc 8d cc 81 cc 84 cc 8a cd 91 cc 88 cc 81 cd 86 cd 86 cc 85 cd 9b cc 81 cc 82 cc 83 cc 8f cc 89 cc 88 cc 81 cc 94 cc 88 cc 93 cc 80 cc 88 cc 81 cc 84 cc 84 cd 8a cc 86 cc bd cc 90 cd 92 cd 91 cc 88 cc 81 cd 91 cc bf cc 8f cc bd cc 93 cc 80 cc 8a cc 81 cc 8a cc 81 cc 8f cc 81 cc 88 cc 81 cc 82 cc 92 cc 80 cc be cc 81 cd 91 cc 81 cc 92 cd 92 cc 84 cc 8e cc 92 cc 8b cd 91 cc 86 cc 87 cc 8b cd 86 cc 90 cc 80 cc bd cc 8c cd 9b cc 8f cc 93 cc 84 cd 90 cd 86 cd 91 cc 93 cc 8e cc bd cc bf cc bf cc 88 cc 81 cc 88 cc 81 cc 87 cc 89 cd 90 cc 81 cd 86 cd 8c cd 8c cc 86 cd 9b cc 8a cd 86 cc 93 cc 8f cc bd cd 92 cd 86 cd 8c cd 82 cd 8a cc be cc 93 cd 8b cd 8b cc bf cc 8b cc 88 cc 81 cc 88 cd 90 cc 93 cc 91 cc 90 cc 83 cd 9b cd 8b cc 88 cc 81 cc 81 cc 83 cc 89 cc 8f cc 93 cc 82 cc 8b cc 93 cc 8c cc 88 cc 81 cd 9b cd 9b cc 91 cd 82 cc 89 cd 8b cc 83 cc bd cd 97 cc 81 cc 92 cc 80 cc 93 cc 94 cc 85 cc 8b cc 81 cc 88 cc 81 cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc be cc 88 cc 81 cc 8b cc 84 cc 90 cc 88 cc 81 cc 92 cc 87 cc 8b cc 91 cc 86 cc 86 cc 93 cd 82 cd 8c cc 88 cc 92 cc 80 cc 90 cc 87 cc 85 cc 89 cd 97 cc 86 cc 8f cc 93 cc 8c cd 90 cc 89 cc 80 cc 82 cd 82 cc 93 cc 84 cc 8c cc 93 cc 8d cd 97 cc 84 cc 81 cc 8d cc 89 cc be cc 8a cd 8c cc 83 cc 91 cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc 8d cc 81 cc 88 cc 81 cc 93 cc 8d cc 8a cc 88 cc 81 cc 8c cd 90 cc 8d cc 85 cc 83 cc 88 cc 81 cc bf cc 80 cc 84 cc 91 cc 83 cc 88 cc 81 cc 82 cc 86 cc 87 cd 82 cc 92 cc 88 cc 91 cc 81 cc 8e cd 97 cc 84 cc be cc bf cd 82 cc 91 cc 81 cd 91 cc 88 cc 81 cc 8c cd 8c cc 8f cd 91 cc 80 cc 89 cc bd cc 90 cc bf cc 8f cc 8e cc 8f cc 92 cc 80 cc 81 cc 82 cc 81 cc 87 cc 94 cc 81 cc 8c cc be cd 97 cc 88 cc 82 cc 8e cd 86 cc 84 cc 80 cc 8e cc 91 cc 8c cc 84 cc 8d cc 94 cc 81 cc 80 cc 8c cc 83 cc 88 cc 86 cc 89 cc 8a cc 84 cc 92 cc 89 cc 82 cd 8b cd 9b cc 88 cc 81 cc 83 cc 92 cc 81 cc 83 cd 8b cc 81 cc 92 cd 9b cc 8a cd 97 cc 8c cc 84 cc 93 cc 94 cc 85 cc 81 cc 8b cd 8a cd 97 cd 92 cc 85 cc be cd 97 cc 92 cd 92 cc be cc 86 cc 8b cd 97 cc 94 cc 90 cc 93 cd 8b cc 85 cd 92 cc 8d cd 82 cc 8f cc 87 cd 8c cd 8b cd 90 cc 81 cc 93 cc 93 cc 93 cc 8b cc 8a cc 82 cd 82 cc 80 cc 80 cc 8f cc 89 cd 8c cc 88 cc 93 41 69 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cc 8e cc 88 cc 81 cc 85 cc 84 cc 8c cc 92 cd 86 cc 91 cc 91 cc 8d cc 80 cc be cc 92 cc 8b cd 92 cc 80 cd 82 cc 90 cc 86 cc 86 cd 91 cc 91 cc 93 cd 98 cc 9a cd 98 cc 95 cd 98 cd 98 cc 9a cc 9a cd 98 cd 98 cc 95 cd 98 cc 9a cd 98 cc 95 cc 95 cc 9a cc 9a cc 9a cc 95 cc 95 cc 9a cd 98 cd 98 cc 95 cc 95 cc 9a cd 98 cd 98 cd 98 cc 95 cc 9a cc 9a cc 9a cc 95 cd 98 cc 95 cc 95 cd 98 cc 95 cc 95 cd 98 cd 98 cc 95 cc 95 cd 98 cc 9a cc 95 cc 95 cc 95 cc 9a cc 9a cd 98 cc 9a cc 95 cd 98 cc 95 cd 98 cc 95 cd 98 cc 9a cd 98 cc 9a cc 95 cc 9a cd 98 cc 95 cd 98 cc 9a cc 9a cc 95 cc 95 cc 9a cc 95 cc 9a cc 9a cd 98 cd 98 cc 95 cd 98 cc 9a cd 98 cc 95 cd 98 cd 98 cd 98 cc 9a cc 9a cd 98 cd 98 cd 98 cd 98 cd 98 cd 98 cc 95 cc 9a cd 98 cc 9a cc 9a cc 9a cd 98 cc 9a cd 98 cc 95 cc 9a cc 95 cc 9a cc 95 cd 98 cc 9a cd 98 cd 98 cc 95 cc 9a cc 95 cd 98 cc 95 cd 98 cc 95 cd 98 cc 9a cc 9a cd 98 cc 9a cd 98 cd 98 cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd 9c cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d 41 20 22 cd 89 cc ac cc bc cc ac cc 9c cd 87 cc ba cc ad cc aa cc ad cd 93 cc a3 cd 8e cc a0 cc b0 cc 98 cc a6 cd 93 cc ac cd 96 cc 9e cd 94 cc a9 cd 94 cc a9 cd 9a cd 94 cc 9d cd 88 cc bb cc b3 cc ac cc ab cc 98 cc 9d cd 95 cc 97 cc 9d cc b1 cc a9 cc 96 cc bc cd 96 cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd a0 cd 9d cd a0 cd a0 cd a0 cd 9d cd 9d cd 9d cd 9d cd a0 cd a0 cd 9d cd a0 41 0d 0a df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 0d 0a df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 0d 0a df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a 0d 0a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 0d 0a e3 8a a0 20 df 98 e3 8a b0 df 98 e3 8a b0 df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 a0 8a df 98 e3 8a a0 20 df 98 e3 8a a0 20 df 98 e3 8a a0 20 0d 0a e2 81 a0 e2 81 a0 e2 81 a0 e2 81 a0 32".split(" ");
var empt = '';
var langVal = new Array(
    ModPE.getI18n("menu.copyright"),
    ModPE.getI18n("playscreen.header.local"),
    ModPE.getI18n("createWorldScreen.progress.local"),
    ModPE.getI18n("progressScreen.generating"),
    ModPE.getI18n("progressScreen.message.locating")
);
var breaktimes = new Array(256);
for (var i = 0; i <= 256; i++) {
    breaktimes[i] = Block.getDestroyTime(i);
}
for (var i in em) {
    empt += String.fromCharCode(parseInt(em[i], 16));
}
//empt="\u274e";
var sdcard = android.os.Environment.getExternalStorageDirectory();
var File = java.io.File;
var FileReader = java.io.FileReader;
var BufferedReader = java.io.BufferedReader;
var FOS = java.io.FileOutputStream;
var String = java.lang.String;
var StringBuilder = java.lang.StringBuilder;
var MediaPlayer = android.media.MediaPlayer();
var file = {
    select: function(dir, fileName) {
        return (new File(dir, fileName));
    },
    exists: function(selectedFile) {
        return selectedFile.exists();
    },
    create: function(selectedFile) {
        selectedFile.createNewFile();
        return selectedFile;
    },
    del: function(selectedFile) {
        selectedFile.delete();
    },
    read: function(selectedFile) {
        var readed = (new BufferedReader(new FileReader(selectedFile)));
        var data = new StringBuilder();
        var string;
        while ((string = readed.readLine()) != null) {
            data.append(string);
            data.append('\n');
        }
        return data.toString();
    },
    readLine: function(selectedFile, line) {
        var readT = new file.read(selectedFile);
        var lineArray = readT.split('\n');
        return lineArray[line - 1];
    },
    readKey: function(selectedFile, key, keySeparator) {
        var isText = 0;
        var textR = new file.read(selectedFile);
        var splitTextR = textR.split('\n');
        for (var i = 0; i < splitTextR.length; i++) {
            var textRF = splitTextR[i].split(keySeparator);
            if (textRF[0] == key) {
                return textRF[1];
                isText = 1;
                break;
            }
            if (!isText) {
                return '[Unknown]';
            }
        }
    },
    write: function(selectedFile, text) {
        file.rewrite(selectedFile, (new file.read(selectedFile)) + text);
    },
    rewrite: function(selectedFile, text) {
        var writeFOS = new FOS(selectedFile);
        writeFOS.write(new String(text)
            .getBytes());
    },
    writeKey: function(selectedFile, key, keyText, keySeparator) {
        var isText = 0;
        var textR = new file.read(selectedFile);
        var splitTextR = textR.split(' ');
        for (var i = 0; i < splitTextR.length; i++) {
            var textRF = splitTextR[i].split(keySeparator);
            if (textRF[0] == key) {
                var splitWithKey = textR.split(key + keySeparator + new file.readKey(selectedFile, key));
                file.rewrite(selectedFile, splitWithKey[0] + key + keySeparator + keyText + splitWithKey[1]);
                isText = 1;
                break;
            }
        }
        if (!isText) {
            file.write(selectedFile, key + keySeparator + keyText);
        }
    },
    mPlay: function(musicPath) {
        MediaPlayer.setDataSource(musicPath);
        MediaPlayer.prepare();
        MediaPlayer.start();
    },
    mStop: function() {
        MediaPlayer.reset();
    }
};

function aimAt(e) {
    var velocity = 1;
    var posX =
        Entity.getX(e) - Player.getX();
    var posY =
        Entity.getEntityTypeId(e) == EntityType.PLAYER ? Entity.getY(e) - Player.getY() : Entity.getY(e) + 1 - Player.getY();
    var posZ =
        Entity.getZ(e) - Player.getZ();
    var yaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
    var y2 = Math.sqrt(posX * posX + posZ * posZ);
    var g = 0.006;
    var tmp =
        (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
    var pitch = -Math.toDegrees(Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
    setRot(Player.getEntity(), yaw, pitch);
}

function toast(text, dur) {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), text, dur)
                    .show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function ctoast(text) {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var thetoast = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), text, android.widget.Toast.LENGTH_LONG);
                var layout = new android.widget.LinearLayout(ctx);
                var msg = new android.widget.TextView(ctx);
                msg.setText(text);
                layout.addView(msg);
                layout.setBackground(new android.graphics.drawable.BitmapDrawable(bg));
                thetoast.setView(layout);
                thetoast.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var scaledsize = ((ctx.getWindowManager()
    .getDefaultDisplay()
    .getWidth()) / 5);
var btg = android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png")), 0, 0, 64, 24), scaledsize, scaledsize * 1.2, false);
var bg = android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png")), 153, 26, 8, 25), scaledsize, scaledsize / 2 + 4, false);
var nx, ny, nz;
var ox, oy, oz;
var imob = 1;
var e = null;
var dat = null;

function createfree() {
    if (imob == 1) {
        try {
            print("1");
            e = Level.spawnMob(getPlayerX(), getPlayerY() + 1, getPlayerZ(), EntityType.PIG);
            Entity.setCollisionSize(e, 0, 0);
            Entity.setHealth(e, 1500);
            dat = Level.spawnMob(getPlayerX(), getPlayerY() + 1, getPlayerZ(), EntityType.BOAT);
            //Entity.setCollisionSize(dat, 0, 0);
            //Entity.setHealth(dat, 1500);
            ox = getPlayerX();
            oy = getPlayerY();
            oz = getPlayerZ();
            print("keinfail");
        } catch (e) {
            print(e);
            print(e);
        }
    }
}
//variablen variables
var lsd = true, lsdcolor = new Array();
var tick = 0;
var ghost = false;
var nightvis = 0;
var gamespeed = 4;
var fly = Player.canFly();
var gamemode = Level.getGameMode();
var xray = false;
var entmov = false;
var sspam = false;
var spammsg = "Trololol";
var glide = false;
var phack = false;
var masstpa = false;
var masstell = false;
var masstellmsg = "Hi!";
var lw = false;
var nor = 0;
var wallh = false;
var aimbot = false;
var aimtarget = null;
var spider = false;
var jrcheat = false;
var godmode = false;
var softmode = false;
var speed = 0;
var smine = 0;
var feat = 32;
var online = false;
var inject = {
    every: function() {},
    hackmenu: {
        hacks: function() {},
        server: function() {}
    }
};
var desc = {
    hack: {
        gspeed: {
            title: "Game-Speed",
            desc: "It changes the Game-Speed.\n The best way to be faster on servers",
            servercomp: true
        },
        gm: {
            title: "Gamemode Hack",
            desc: "It changes your gamemode.\n With this, you can fly on servers",
            servercomp: true
        },
        flight: {
            title: "Flight Hack",
            desc: "It let you fly in Single Player.",
            servercomp: false
        },
        nigvis: {
            title: "Night Vision",
            desc: "It let you see everything.\n Dont forget thath i will lag a few seconds when you activate it",
            servercomp: true
        },
        eaura: {
            title: "Eaura",
            desc: "It let you automatically aim at mobs.",
            servercomp: false
        },
        glide: {
            title: "Glide",
            desc: "It let you glide in Single Player.\n Don't forget: You will get normal fall damage",
            servercomp: false
        },
        liquidwalk: {
            title: "Liquid Walk",
            desc: "It let you walk on liquids.\n Best way to be faster on liquid's",
            servercomp: true
        },
        xray: {
            title: "Xray",
            desc: "It let you see every ore.\n Attention: It's still a buggy function!",
            servercomp: true
        },
        wallhack: {
            title: "Wall Hack",
            desc: "It let you walk through blocks.\n Don't forget that you get damage when walking through blocks",
            servercomp: true
        },
        freecam: {
            title: "Freecam",
            desc: "It let you fly out of your body.\n [Not working at the moment]",
            servercomp: false
        },
        bowaimbot: {
            title: "BowAimbot",
            desc: "It automatically aims at mobs.",
            servercomp: false
        },
        jrhack: {
            title: "JRHack",
            desc: "Click a block to jump to it.",
            servercomp: false
        },
        speed: {
            title: "Speed",
            desc: "Alternative speed.\nBypasses HyCheat",
            servercomp: true
        },
        smine: {
            title: "SpeedMine",
            desc: "Speed mine in 4 modes",
            servercomp: true
        },
        feat: {
            title: "FastEat",
            desc: "Eat food faster",
            servercomp: true
        }
    },
    server: {
        enab: {
            title: "Enable Multiplayer",
            desc: "This let you activate another mods in Multiplayer.\n Attention: If you activate this, you cannot use Spammers and you can't send Commands to the server",
            servercomp: true
        },
        spam: {
            title: "Server Spam",
            desc: "It spamms a custom message in the chat.",
            servercomp: true
        },
        sem: {
            title: "SEM",
            desc: "It sends a strange Message in the chat.",
            servercomp: true
        },
        passhack: {
            title: "Password Hack",
            desc: "It tries to hack the password.\n It's still a buggy function",
            servercomp: true
        },
        randreg: {
            title: "Random Register",
            desc: "It registers a new Account with a random Email.",
            servercomp: true
        },
        longmsg: {
            title: "Long Message",
            desc: "It sends a long Message in the chat.",
            servercomp: true
        },
        illuminati: {
            title: "Illuminati",
            desc: " It sends an Illuminati message.\nCreepy!",
            servercomp: true
        }
    },
    sp: {
        day: {
            title: "Day",
            desc: "It changes the time to day",
            servercomp: true
        },
        night: {
            title: "Night",
            desc: "It changes the time to night",
            servercomp: true
        },
        xp: {
            title: "XP",
            desc: "It let you add experience",
            servercomp: true
        },
        wmd: {
            title: "Weather Manager",
            desc: "It let you change the weather",
            servercomp: true
        },
        godmode: {
            title: "GodMode",
            desc: "You are nearly invincible!",
            servercomp: false
        },
        softmode: {
            title: "SoftMode",
            desc: "Opposite of GodMode",
            servercomp: false
        }
    },
    info: {
        extra: {
            title: "Extra",
            desc: "Not a hack",
            servercomp: false
        }
    },
    unknown: {
        title: "Unknown",
        desc: "Unknown or work in progress hack",
        servercomp: false
    },
    mitem: {
        title: "Menu Item",
        desc: "Not a Hack",
        servercomp: true
    },
    misc: {
        title: "Something",
        desc: "Not a Hack",
        servercomp: true
    }
};

function newSpriteButton(desc) {
    var btn = new android.widget.Button(ctx);
    btn.setTextColor(android.graphics.Color.WHITE);
    btn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(btg));
    btn.getBackground().setAlpha(240);
    if (desc.servercomp == false && online) {
        btn.getBackground().setAlpha(100);
        //btn.setClickable(false);
    }
	if(lsd)btn.getBackground().setAlpha(100);
    btn.setOnLongClickListener(new android.view.View.OnLongClickListener({
        onLongClick: function(v, t) {
            ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(50);
            descd(desc);
            return true;
        }
    }));
    return btn;
}
/*function newSpriteButton(desc, inmp) {
	var btn = new android.widget.Button(ctx);
	btn.setTextColor(android.graphics.Color.WHITE);
	btn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(btg));
	btn.getBackground().setAlpha(240);
	btn.setOnLongClickListener(new android.view.View.OnLongClickListener({
		onLongClick: function(v, t) {
			ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(50);
			descd(desc);
			return true;
		}
	}));
	return btn;
}
*/
function newplaceholder() {
    var t = new android.widget.TextView(ctx);
    t.setText(" ");
    t.setMinWidth(dip2px(2));
    t.setMaxWidth(dip2px(3));
    t.setMinHeight(dip2px(5));
    t.setMaxHeight(dip2px(10));
    return t;
}

function newbigplaceholder() {
    var t = new android.widget.TextView(ctx);
    t.setText(" ");
    t.setMinWidth(dip2px(20));
    t.setMinWidth(dip2px(30));
    return t;
}

function openbros(url) {
    openbro(url);
}

function openbro(uurl) {
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            var rl = new android.content.Intent(ctx);
            rl.setAction(android.content.Intent.ACTION_VIEW);
            rl.setData(android.net.Uri.parse(uurl));
            ctx.startActivity(rl);
        }
    });
}
var fstart = false;
var config = new file.select(sdcard, "/games/com.mojang/servicehack/config.dat");
var clientId = new file.select(sdcard, "/games/com.mojang/minecraftpe/clientId.txt");
var configdir = new file.select(sdcard, "/games/com.mojang/servicehack/");
var options = new file.select(sdcard, "games/com.mojang/minecraftpe/options.txt");
/*Example - write text*/
var ver = "0.11.10.1";
//Language
function pref() {
    try {
        var prefe = file.read(config)
            .split(";");
        return prefe;
    } catch (e) {
        //	print(e);
    }
}

function collectGA() {
    var r = new java.lang.Runnable({
        run: function() {
            try {
                var u = new java.net.URL("http://www.google-analytics.com/collect?v=1&tid=UA-69994154-1&cid=" + ((file.read(clientId)).split("\n").join("")) + "&t=pageview&dl=Servicehack%2Fstart&aip=1&ul=" + file.readLine(options, 8).split(":")[1]);
                var c = u.openConnection();
                c.setRequestMethod("GET");
                c.setDoOutput(true);
                c.connect();
                c.getContentLength();
                var input = c.getInputStream();
                var contents = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var bytesRead = 0;
                var strFileContents = new java.lang.StringBuilder();
                var bytesRead = 0;
                while ((bytesRead = input.read(contents)) != -1) {
                    strFileContents.append(new java.lang.String(contents, 0, bytesRead));
                }
            } catch (e) {}
        }
    });
    var th = new java.lang.Thread(r);
    th.start();
}
if (file.exists(config) == false) {
    firststart();
} else {
    loadpref();
    var lang = pref()[0].toString();
    var themehtml = pref()[1];
    var audi = pref()[2];
    if (audi == "true") {
        var audo = true;
    } else {
        var audo = false;
    }
    if (pref().length > 2) {
        if (pref()[3] == "true" || pref()[3] == "true\n") {
            collectGA();
        } else if (pref()[3] == "" || pref()[3] == "\n") {
            gad();
        } else {}
    } else {
        gad();
    }
}
var blo = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 141, 15, 16, 17, 18, 20, 21, 22, 24, 26, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 73, 74, 78, 79, 80, 81, 82, 83, 85, 87, 92, 95, 98, 102, 103, 105, 107, 109, 108, 112, 114, 128, 155, 156, 245, 246, 247, 248, 249, 253, 254, 255];
var lamg = new Array(
    new Array(
        "Servicehack " + ver + "\n by GodSoft",
        "Speed",
        "About",
        "Settings",
        "Follow us",
        new Array("Xray off", "Xray on"),
        new Array("Survival", "Creative", "Adventure", "Spectator"),
        new Array("Flight: Off", "Flight: On"),
        new Array("Night Vision: Off", "Night Vision: On"),
        new Array("on", "off"),
        "Extra",
        "Music",
        "Screenshot",
        "Server",
        "Advanced Settings",
        "More Mods",
        new Array("Yes", "No"),
        "GodMode",
        new Array("Day", "Night"),
        "SpeedMine"
    ),
    new Array(
        "Servicehack " + ver + "\n von GodSoft",
        "Schnelligkeit",
        "Über",
        "Einstellungen",
        "Folge uns",
        new Array("Xray aus", "Xray an"),
        new Array("Überleben", "Kreativ", "Abenteuer", "Zuschauer"),
        new Array("Fliegen: aus", "Fliegen: an"),
        new Array("Nacht-Sicht: Aus", "Nacht-Sicht: An"),
        new Array("an", "aus"),
        "Extra",
        "Musik",
        "Bildschirmaufnahme",
        "Server",
        "Erweiterte Einstellungen",
        "Mehr Mods",
        new Array("Ja", "Nein"),
        "Unsterblichkeit",
        new Array("Tag", "Nacht"),
        "SpeedMine"
    ),
    new Array(
        "Servicehack " + ver + "\n à partir de GodSoft",
        "Vitesse",
        "Environ",
        "Paramètres",
        'Suivez-nous',
        new Array("X Ray off", "X Ray tourné"),
        new Array("Survie", "Creative", "Aventure", "Spectateur"),
        new Array("Voler: off", "Voler: tourné"),
        new Array("Vision de nuit: off", "Vision de nuit: tourné"),
        new Array("tourné", "off"),
        "Supplémentaire",
        "Musique",
        "Capture d'écran",
        "Serveur",
        "Paramètres Advancés",
        "Plus Mods",
        new Array("Oui", "No"),
        "Invincible",
        new Array("journée", "nuit"),
        "SpeedMine"
    ),
    new Array(
        "Servicehack " + ver + "\n desde GodSoft",
        "Velocidad",
        "Acerca",
        "Ajustes",
        "Síguenos",
        new Array("X Ray off", "X Ray volvió"),
        new Array("Supervivencia", "Creativo"),
        new Array("Volar: off", "Volar: volvió"),
        new Array("Vision nocturna: off", "Vision nocturna: volvió"),
        new Array("volvió", "off"),
        "Extra",
        "Música",
        "Screenshot",
        "Servidor",
        "Ajustes Avanzados",
        "Mas Mods",
        new Array("Sí", "No"),
        "Invincible",
        new Array("día", "noche"),
        "SpeedMine"
    ), new Array(
        "Servicehack " + ver + "\n, GodSoft가 제작",
        "속도",
        "정보",
        "설정",
        "저희 팔로우 하기",
        new Array("엑스레이 끄기", "엑스레이 켜기"),
        new Array("서바이벌", "크리에이티브", "모험", "관람자"),
        new Array("비행: 꺼짐", "비행: 켜짐"),
        new Array("야간 투시: 꺼짐", "야간 투시: 켜짐"),
        new Array("켜짐", "꺼짐"),
        "추가 기능",
        "음악",
        "스크린샷",
        "서버",
        "고급 설정",
        "더 많은 모드",
        new Array("예", "아니오"),
        "무적",
        new Array("낮", "밤"),
        "SpeedMine"
    )
);
var About = "This Mod is by\nGodSoft\n\nThis Mod is developed with DroidEdit \naviable in Google Play store."
var GUI;
var i = 1;

function se(a, b) {
    try {
        var dist = (Entity.getX(a) + Entity.getY(a) + Entity.getZ(a)) - (getPlayerX() + getPlayerY() + getPlayerZ());
        var dist2 = (Entity.getX(b) + Entity.getY(b) + Entity.getZ(b)) - (getPlayerX() + getPlayerY() + getPlayerZ());
        if (dist < 0) dist = -dist;
        if (dist2 < 0) dist2 = -dist2;
        if (dist == 0 || dist2 == 0 || !dist || !dist2) return 0;
        return dist - dist2;
    } catch (e) {}
}
var utils = {
        entity: {
            getClosestEntity: function() {
                try {
                    var close = null;
                    var mobs = Entity.getAll();
                    try {
                        mobs.sort(se);
                    } catch (e) {}
                    for (var i = 0; i >= 20; i++) {
                        if (Entity.getEntityTypeId(mobs[i]) <= 63) close = mobs[i];
                    }
                    if (!close) close = mobs[1];
                    /*for(var i = 0; i < mobs.length; i++){
if(Entity.getHealth(mobs[i])>=1){

			var dist = (Entity.getX(mobs[i])*Entity.getY(mobs[i])*Entity.getZ(mobs[i]))-(getPlayerX()*getPlayerY()*getPlayerZ());

			if(close)var dist2 = (Entity.getX(close)*Entity.getY(close)*Entity.getZ(close))-(getPlayerX()*getPlayerY()*getPlayerZ());
			

			if(dist<dist2||close == null){
				

				

					close = mobs[i];
				
			}
		}}*/
                    return close;
                } catch (e) {
                    toast(e.lineNumber + " Fail " + e, 1);
                }
            },
            getClosestEntitys: function() {
                var close = null;
                var mobs = Entity.getAll();
                try {
                    mobs.sort(se);
                } catch (e) {}
                return mobs;
            }
        }
    }
    //hackzzzz
    //update
var menu;
var menu2;
var exitUI, exitUI2;
//sprint
var sprinter = 0;
var px, py, pz;
var Xdiff, Zdiff;
//Configuration
var titlesize = 19,
    titlegravity = android.view.Gravity.CENTER;
var textsize = 15;
var textgravity = android.view.Gravity.CENTER;
var textcolor = android.graphics.Color.parseColor("#ffffff");
var pass;
var passi = 0;
//Functions...
Math.toDegrees = function(radians) {
    return radians * 180 / Math.PI;
};

function getpass() {
    var r = new java.lang.Runnable({
        run: function() {
            try {
                var u = new java.net.URL("https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/10_million_password_list_top_10000.txt");
                var c = u.openConnection();
                c.setRequestMethod("GET");
                c.setDoOutput(true);
                c.connect();
                c.getContentLength();
                var input = c.getInputStream();
                var contents = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var bytesRead = 0;
                var strFileContents = new java.lang.StringBuilder();
                var bytesRead = 0;
                while ((bytesRead = input.read(contents)) != -1) {
                    strFileContents.append(new java.lang.String(contents, 0, bytesRead));
                }
                pass = strFileContents.toString()
                    .split("\n");
                g();
            } catch (e) {}
        }
    });
    var th = new java.lang.Thread(r);
    th.start();
}

function loadpref() {
    var prefs = file.read(config)
        .split(";");
    lang = prefs[0];
    var audi = pref()[2];
    if (audi == "true" || audi == true) {
        audo = true;
    } else {
        audo = false;
    }
    //   	print(prefs[0]);
}
loadpref();

function updatemod() {
    var ru = new java.lang.Runnable({
        run: function() {
            try {
                toast("Installing Update...", 1);
                var newScript;
                /*
                var text = new java.io.ByteArrayOutputStream();
                var response = android.net.http.AndroidHttpClient.newInstance("CheckForUpdates()").execute(new org.apache.http.client.methods.HttpGet("https://raw.githubusercontent.com/Godsoft029/servicehack/master/service")).getEntity().writeTo(text);
                text.close();
                */
                var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
                var u = new java.net.URL("https://raw.githubusercontent.com/Godsoft029/servicehack/master/update");
                var c = u.openConnection();
                c.setRequestMethod("GET");
                c.setDoOutput(true);
                c.connect();
                c.getContentLength();
                var input = c.getInputStream();
                var contents = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var bytesRead = 0;
                var dercode = new java.lang.StringBuilder();
                while ((bytesRead = input.read(contents)) != -1) {
                    dercode.append(new java.lang.String(contents, 0, bytesRead));
                    /*newScript += new java.lang.String(contents, 0, bytesRead); */
                }
                var thecode = dercode.toString();
                var patchesFolder = ctx.getDir("modscripts", 0);
                var scriptFile = new java.io.File(patchesFolder, "servicehack");
                var printWriter = new java.io.PrintWriter(scriptFile);
                printWriter.write(thecode);
                printWriter.flush();
                printWriter.close();
                try {
                    net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(scriptFile, false);
                    net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(scriptFile, true);
                    toast("New Version saved as 'servicehack'", 10);
                } catch (e) {
                    toast("Error during installation Progress: " + e, 2);
                }
            } catch (e) {
                print(e);
            }
        }
    });
    var th = new java.lang.Thread(ru);
    th.start();
}
var upavi = false;

function checkfupdate() {
    var r = new java.lang.Runnable({
        run: function() {
            try {
                var u = new java.net.URL("https://raw.githubusercontent.com/Godsoft029/servicehack/master/newversion");
                var c = u.openConnection();
                c.setRequestMethod("GET");
                c.setDoOutput(true);
                c.connect();
                c.getContentLength();
                var input = c.getInputStream();
                var contents = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var bytesRead = 0;
                var strFileContents;
                while ((bytesRead = input.read(contents)) != -1) {
                    strFileContents = new java.lang.String(contents, 0, bytesRead);
                }
                /*print(strFileContents);*/
                var newVersion = strFileContents;
                if (ver + "\n" != strFileContents) {
                    if (audo == true) {
                        updatemod();
                    } else {
                        toast("Servicehack: Update!", 1000);
                        upavi = true;
                    }
                }
            } catch (e) {
                // ("Network Error!", 2);
            }
        }
    });
    var th = new java.lang.Thread(r);
    th.start();
}
checkfupdate();

function dailycode() {
    var r = new java.lang.Runnable({
        run: function() {
            try {
                var u = new java.net.URL("https://raw.githubusercontent.com/Godsoft029/servicehack/master/dailycode.run");
                var c = u.openConnection();
                c.setRequestMethod("GET");
                c.setDoOutput(true);
                c.connect();
                c.getContentLength();
                var input = c.getInputStream();
                var contents = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                var bytesRead = 0;
                var strFileContents;
                while ((bytesRead = input.read(contents)) != -1) {
                    strFileContents = new java.lang.String(contents, 0, bytesRead);
                }
                var code = strFileContents;
                try {
                    eval(code + "");
                } catch (e) {}
            } catch (e) {
                // ("Network Error!", 2);
            }
            getpass();
        }
    });
    var th = new java.lang.Thread(r);
    th.start();
}
dailycode();

function configd1() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert = new android.app.AlertDialog.Builder(ctx);
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        var note = new android.widget.TextView(ctx);
        var lange = new android.widget.TextView(ctx);
        var thx = new android.widget.TextView(ctx);
        var lango = new android.widget.TextView(ctx);
        var themeseek = new android.widget.SeekBar(ctx);
        themeseek.setMax(5);
        themeseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
            onStopTrackingTouch: function(view) {
                var themeprog = themeseek.getProgress();
                if (themeprog == 0) {
                    note.setText("Holo Dark");
                }
                if (themeprog == 1) {
                    note.setText("Holo Light");
                }
                if (themeprog == 2) {
                    note.setText("Blue");
                }
                if (themeprog == 3) {
                    note.setText("Red");
                }
                if (themeprog == 4) {
                    note.setText("Green");
                }
                if (themeprog == 5) {
                    note.setText("Transparent");
                }
            }
        }));
        var themetext = new android.widget.TextView(ctx);
        themetext.setText("Theme: ");
        lange.setText("English");
        lango.setText("Language:");
        lange.setTextSize(18);
        lango.setTextSize(18);
        thx.setText("");
        thx.setTextSize(14);
        thx.setGravity(android.view.Gravity.CENTER);
        themetext.setTextSize(18);
        lange.setGravity(android.view.Gravity.CENTER);
        lango.setGravity(android.view.Gravity.CENTER);
        themetext.setGravity(android.view.Gravity.CENTER);
        note.setText("Holo Dark");
        alert.setTitle("                   Configuration ");
        alert.setCancelable(false);
        note.setTextColor(android.graphics.Color.WHITE);
        note.setTextSize(18);
        note.setGravity(android.view.Gravity.CENTER);
        var sbpProgress = 0;
        var sbp = new android.widget.SeekBar(ctx);
        sbp.setMax(4);
        sbp.setProgress(sbpProgress);
        sbp.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
            onStopTrackingTouch: function(view) {
                sbpProgress = sbp.getProgress();
                thx.setText("");
                if (sbpProgress == 0) {
                    lange.setText("English");
                }
                if (sbpProgress == 1) {
                    lange.setText("German");
                }
                if (sbpProgress == 2) {
                    lange.setText("French");
                }
                if (sbpProgress == 3) {
                    lange.setText("Spanish");
                }
                if (sbpProgress == 4) {
                    lange.setText("Korean");
                    thx.setText("(Thanks to Johnmacrocraft)");
                }
            }
        }));
        layout.addView(themetext);
        layout.addView(themeseek);
        layout.addView(note);
        layout.addView(lango);
        layout.addView(sbp);
        layout.addView(lange);
        layout.addView(thx);
        alert.setView(layout);
    } catch (e) {
        print("1: " + e);
    }
    try {
        alert.setPositiveButton('Save', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                try {
                    configdir.mkdir();
                    file.create(config);
                    switch (themeseek.getProgress()) {
                        case 0:
                            file.rewrite(config, sbpProgress + ";303030;" + audo + ";");
                            themehtml = "303030";
                            break;
                        case 1:
                            file.rewrite(config, sbpProgress + ";757575;" + audo + ";");
                            themehtml = "757575";
                            break;
                        case 2:
                            file.rewrite(config, sbpProgress + ";3039f9;" + audo + ";");
                            themehtml = "3039f9";
                            break;
                        case 3:
                            file.rewrite(config, sbpProgress + ";d32f2f;" + audo + ";");
                            themehtml = "d32f2f";
                            break;
                        case 4:
                            file.rewrite(config, sbpProgress + ";4CAF50;" + audo + ";");
                            themehtml = "4CAF50";
                            break;
                        case 5:
                            file.rewrite(config, sbpProgress + ";00000000;" + audo + ";");
                            themehtml = "00000000";
                            break;
                    }
                    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
                    ctx.runOnUiThread(new java.lang.Runnable({
                        run: function() {
                            if (menu != null) {
                                menu.dismiss();
                                menu = null;
                            }
                            if (exitUI != null) {
                                exitUI.dismiss();
                                exitUI = null;
                            }
                        }
                    }));
                    lang = sbpProgress;
                    //  print("Successful!");
                    toast("Successful!", 0.5);
                } catch (e) {
                    print("Line 394: " + e);
                }
            }
        }));
        alert.setNegativeButton("Don't configurate!", new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
            }
        }));
    } catch (e) {
        print("2 " + e);
    }
    try {
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialog = alert.create();
                dialog.show();
            }
        }));
    } catch (e) {
        print("3: " + e);
    }
}

function gad() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle("Google Analytics");
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var text = new android.widget.TextView(ctx);
        text.setText("We are now using Google Analytics to measure how many people are using Servicehack.\nWe will collect your language and when you start using Servicehack.\n(You can reopen this dialog by long-holding the menu button)");
        text.setTextSize(16);
        text.setGravity(android.view.Gravity.CENTER);
        layout.addView(text);
        layout.setGravity(android.view.Gravity.CENTER);
        alert2.setView(layout);
        alert2.setPositiveButton("Ok", new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                file.rewrite(config, pref()[0] + ";" + themehtml + ";" + audo + ";true");
                collectGA();
            }
        }));
        alert2.setNegativeButton("Opt out / Disable", new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                file.rewrite(config, pref()[0] + ";" + themehtml + ";" + audo + ";false");
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function firststart() {
    configdir.mkdir();
    file.create(config);
    if (ModPE.getMinecraftVersion() <= 0.11) {
        configd1();
    } else {
        var langcode = file.readLine(options, 8)
            .split(":")[1];
        if (langcode == "es_ES") {
            lang = 3;
        } else if (langcode == "ko_KR") {
            lang = 4;
        } else if (langcode == "fr_FR") {
            lang = 2
        } else if (langcode == "de_DE") {
            lang = 1;
        } else {
            lang = 0;
        }
        /*
        switch(langcode){
        case "es_ES":
        lang=3;
        break;
        case "fr_FR":
        lang=2;
        break;
        case "de_DE":
        lang=1;
        break;
        default:
        lang=0;
        NT
        print("hai"+langcode+"Hai");
        }*/
        file.rewrite(config, lang + ";303030;" + true + ";");
        themehtml = 303030;
    }
    gad();
}
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var menuBtn;

function showmenubtn() {
    menuBtn = new android.widget.Button(ctx);
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                var layout = new android.widget.LinearLayout(ctx);
                layout.setOrientation(1);
                /*if(ghost) {
                	menuBtn.setText('');
                	menuBtn.setBackgroundColor(android.graphics.Color.parseColor("#01ffff00"));
                } else {
                	menuBtn.setText('[SH]');
                	menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));
                }
                */
                menuBtn.setText('[SH]');
                menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));
                menuBtn.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        //mainMenu();
                        windowMenu();
                        /*exit();*/
                        GUI.dismiss();
                        GUI = null;
                    }
                }));
                menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
                            .vibrate(50);
                        gad();
                        configd1();
                        advsetd();
                        return true;
                    }
                });
                menuBtn.getBackground().setAlpha(200);
                layout.addView(menuBtn);
                GUI = new android.widget.PopupWindow(layout, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                GUI.showAtLocation(ctx.getWindow()
                    .getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 16 * 5, 0);
            } catch (err) {
                print('Line 244: ' + err);
            }
        }
    }));
}
showmenubtn();

function fadeMenuBtn(alpha) {
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler().postDelayed(new java.lang.Runnable({
                run: function() {
                    menuBtn.getBackground().setAlpha(alpha);
                    menuBtn.setTextColor(menuBtn.getTextColors().withAlpha(alpha));
                    if (alpha - 5 > 0) fadeMenuBtn(alpha - 6);
                    if (alpha == 0) {
                        menuBtn.setText("");
                        return;
                    } else if (alpha - 5 < 0) {
                        fadeMenuBtn(0);
                    }
                }
            }), 10);
        }
    }))
}

function exit2() {
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                var xLayout = new android.widget.LinearLayout(ctxe);
                var xButton = new android.widget.Button(ctxe);
                xButton.setText('X');
                xButton.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                if (themehtml == "d32f2f") {
                    xButton.setTextColor(android.graphics.Color.WHITE);
                } else {
                    xButton.setTextColor(android.graphics.Color.RED);
                }
                xButton.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        exitUI2.dismiss();
                        menu2.dismiss();
                        showmenubtn();
                    }
                }));
                xLayout.addView(xButton);
                exitUI2 = new android.widget.PopupWindow(xLayout, dip2px(40), dip2px(40));
                exitUI2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#" + themehtml)));
                exitUI2.showAtLocation(ctxe.getWindow()
                    .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
            } catch (exception) {
                print(exception);
            }
        }
    }));
}

function descd(desc) {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle(desc.title);
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var description = new android.widget.TextView(ctx);
        description.setText("Description: " + desc.desc);
        description.setTextSize(17);
        description.setTextColor(android.graphics.Color.WHITE);
        description.setGravity(android.view.Gravity.CENTER);
        var servercomp = new android.widget.TextView(ctx);
        servercomp.setText("Server Compatible: " + (desc.servercomp ? lamg[lang][16][0] : lamg[lang][16][1]));
        //print(lamg[lang][16]);
        servercomp.setTextSize(17);
        servercomp.setTextColor(android.graphics.Color.WHITE);
        servercomp.setGravity(android.view.Gravity.CENTER);
        layout.addView(description);
        layout.addView(servercomp);
        alert2.setView(layout);
        alert2.setPositiveButton('Close', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        toast(e.lineNumber + " Failed!: " + e, 2);
    }
}

function hackmenu(which) {
    eval("hackermenu?hackermenu.dismiss():hackermenu=null");
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                //functions...
                //textviews...
                //butooncheats
                /* btnabout.setOnClickListener(new android.view.View.OnClickListener({
                	  onClick: function(viewarg){
                hackermenu.dismiss();

                	  }
                	  }));
                	  */
                var menuLayout = new android.widget.LinearLayout(ctx);
                var menuScroll = new android.widget.HorizontalScrollView(ctx);
                var menuLayout1 = new android.widget.LinearLayout(ctx);
                var menuLayout2 = new android.widget.LinearLayout(ctx);
                menuLayout.setOrientation(0);
                menuLayout1.setOrientation(1);
                menuLayout2.setOrientation(0);
            } catch (e) {
                print("Linear Fail :" + e);
            }
            try {
                //butooncheats
                //server
                var btnspam = newSpriteButton(desc.server.spam);
                var btnsendemptymes = newSpriteButton(desc.server.sem);
                btnspam.setText("Server Spam: " + (sspam ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnsendemptymes.setText("SEM");
                btnspam.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        btnspam.setText("Server Spam: " + (sspam ? lamg[lang][9][1] : lamg[lang][9][0]));
                        if (sspam == true) {
                            sspam = false;
                        } else {
                            spammsgd(btnspam);
                        }
                    }
                }));
                btnsendemptymes.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Server.sendChat(empt);
                    }
                }));
                var btnphack = newSpriteButton(desc.server.spam);
                btnphack.setText("PassHack(Beta): " + (phack ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnphack.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (pass instanceof Array) {
                            eval(btnphack.setText("PassHack(Beta): " + (phack ? lamg[lang][9][1] : lamg[lang][9][0])));
                            eval(phack ? phack = false : phack = true);
                        } else {
                            toast("No internet Connection!", 1);
                        }
                    }
                }));
                var btnrandreg = newSpriteButton(desc.server.randreg);
                btnrandreg.setText("Register random Account");
                btnrandreg.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Server.sendChat("/login thepassword");
                        Server.sendChat("/register " + (Math.round((Math.random() * 10 * Math.random())))
                            .toString() + "@ga" + Math.random() + "gq.con thepassword");
                        Server.sendChat("/register thepassword");
                        toast("Registered with random Password", 1);
                    }
                }));
                var btnlongblink = newSpriteButton(desc.unknown);
                btnlongblink.setText("Long Blink (Beta)");
                btnlongblink.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        try {
                            var wman = ctx.getSystemService(android.content.Context.WIFI_SERVICE);
                            if (wman.isWifiEnabled()) {
                                wman.setWifiEnabled(true);
                                wman.setWifiEnabled(false);
                                if (hackermenu) hackermenu.dismiss();
                                if (exitUI) exitUI.dismiss();
                                if (menu) menu.dismiss();
                                toast("Now blinking....", 2);
                            } else {
                                toast("You must be connected to a server over wifi!", 2);
                            }
                        } catch (e) {
                            toast("Blink failed! : " + e, 2);
                        }
                    }
                }));
                var btnshortblink = newSpriteButton(desc.unknown);
                btnshortblink.setText("Short Blink (Beta)");
                btnshortblink.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        try {
                            var wman = ctx.getSystemService(android.content.Context.WIFI_SERVICE);
                            if (wman.isWifiEnabled()) {
                                wman.reassociate();
                                if (hackermenu) hackermenu.dismiss();
                                if (exitUI) exitUI.dismiss();
                                if (menu) menu.dismiss();
                                toast("Now blinking....", 2);
                            } else {
                                toast("You must be connected to a server over wifi!", 2);
                            }
                        } catch (e) {
                            toast("Blink failed! : " + e, 2);
                        }
                    }
                }));
                var btncrash = newSpriteButton(desc.server.longmsg);
                btncrash.setText("Long Msg");
                btncrash.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        var r = new java.lang.Runnable({
                            run: function() {
                                var crashcode = "\04";
                                var stackName = "";
                                var builder = new java.lang.StringBuilder().append(crashcode);
                                for (var i = 0; i < 250; i++) {
                                    builder = new java.lang.StringBuilder().append(stackName);
                                    stackName = builder.append(crashcode).toString();
                                }
                                Server.sendChat(stackName);
                                clientMessage("\1");
                            }
                        });
                        var th = new java.lang.Thread(r);
                        th.start();
                    }
                }));

                //Hacks
                var v = new android.view.ViewGroup.LayoutParams(-2, -2);
                var textgamesped = new android.widget.TextView(ctx);
                var sw = ((gamespeed + 3) * 5);
                textgamesped.setText("Gamespeed: " + (sw - 15));
                textgamesped.setGravity(textgravity);
                textgamesped.setTextSize(textsize);
                textgamesped.setTextColor(textcolor);
                var seekgamespeed = new android.widget.SeekBar(ctx);
                seekgamespeed.setMax(13);
                seekgamespeed.setProgress(gamespeed - 1);
                seekgamespeed.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
                    onStopTrackingTouch: function(view) {
                        try {
                            gamespeed = seekgamespeed.getProgress() + 1;
                            var s = ((gamespeed + 3) * 5);
                            ModPE.setGameSpeed((gamespeed + 3) * 5 - 15);
                            textgamesped.setText("Gamespeed: " + (s - 15));
                        } catch (e) {
                            toast("Error Code 2: " + e, 2);
                        }
                    }
                }));
                var btnspeed = newSpriteButton(desc.hack.speed);
                var sp = "normal";
                if (speed == 1) sp = "fast";
                if (speed == 2) sp = "super fast";
                if (speed == 3) sp = "sonic";
                if (speed == 4) sp = "super sonic";
                btnspeed.setText(lamg[lang][1] + ":\n" + sp);
                btnspeed.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        speed++;
                        if (speed > 4) speed = 0;
                        var sp = "normal";
                        if (speed == 1) sp = "fast";
                        if (speed == 2) sp = "super fast";
                        if (speed == 3) sp = "sonic";
                        if (speed == 4) sp = "super sonic";
                        btnspeed.setText(lamg[lang][1] + ":\n" + sp);
                        updateSpeed();
                    }
                }));
                var v = new android.view.ViewGroup.LayoutParams(-2, -2);
                btnspeed.setLayoutParams(v);
                var btngamemode = newSpriteButton(desc.hack.gm);
                gamemode = Level.getGameMode();
                btngamemode.setText(lamg[lang][6][gamemode]);
                btngamemode.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (gamemode == 0) {
                            Level.setGameMode(1);
                            fly = Player.canFly();
                        } else if (gamemode == 1) {
                            var item = new Array(getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());
                            Level.setGameMode(0);
                            Entity.setCarriedItem(Player.getEntity(), item[0], item[1], item[2]);
                            fly = Player.canFly();
                        }
                        fly ? btnfly.setText(lamg[lang][7][1]) : btnfly.setText(lamg[lang][7][0]);
                        gamemode = Level.getGameMode();
                        btngamemode.setText(lamg[lang][6][gamemode]);
                    }
                }));
                fly = Player.canFly();
                var btnfly = newSpriteButton(desc.hack.flight);
                fly ? btnfly.setText(lamg[lang][7][1]) : btnfly.setText(lamg[lang][7][0]);
                btnfly.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (fly) {
                            if (gamemode != 1) {
                                Player.setCanFly(false);
                                fly = false;
                            } else {}
                        } else {
                            fly = true;
                            Player.setCanFly(true);
                        }
                        fly = Player.canFly();
                        fly ? btnfly.setText(lamg[lang][7][1]) : btnfly.setText(lamg[lang][7][0]);
                    }
                }));
                var btnnig = newSpriteButton(desc.hack.nigvis);
                btnnig.setText(lamg[lang][8][nightvis]);
                btnnig.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (nightvis == 0) {
                            Block.setLightLevel(blo, 15);
                            nightvis = 1;
                        } else {
                            Block.setLightLevel(blo, 0);
                            nightvis = 0;
                        }
                        btnnig.setText(lamg[lang][8][nightvis]);
                    }
                }));
                var btnskil = newSpriteButton(desc.hack.eaura);
                btnskil.setText("EAura");
                if (!entmov) {
                    btnskil.setText("EAura: " + lamg[lang][9][1]);
                } else {
                    btnskil.setText("EAura: " + lamg[lang][9][0]);
                }
                btnskil.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (entmov) {
                            btnskil.setText("EAura: " + lamg[lang][9][1]);
                            entmov = false;
                        } else {
                            entmov = true;
                            btnskil.setText("EAura: " + lamg[lang][9][0]);
                        }
                    }
                }));
                var btnglide = newSpriteButton(desc.hack.glide);
                btnglide.setText("Glide(Beta): " + (glide ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnglide.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        eval(btnglide.setText("Glide(Beta): " + (glide ? lamg[lang][9][1] : lamg[lang][9][0])));
                        eval(glide ? glide = false : glide = true);
                    }
                }));
                var btnfreecam = newSpriteButton(desc.hack.freecam);
                btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                btnfreecam.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        try {
                            if (imob == 1) {
                                createfree();
                                imob = 0;
                                btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                            } else {
                                ModPE.setCamera(Player.getEntity());
                                Entity.remove(e);
                                e = null;
                                imob = 1;
                                btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                            }
                        } catch (e) {
                            print(e);
                        }
                    }
                }));
                var btnlw = newSpriteButton(desc.hack.liquidwalk);
                var lwtext;
                if (lw) {
                    lwtext = lamg[lang][9][0];
                } else {
                    lwtext = lamg[lang][9][1];
                }
                btnlw.setText("Liquid Walk: " + lwtext);
                btnlw.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (lw) {
                            lwtext = lamg[lang][9][1];
                            lw = false;
                            Block.setShape(8, 0, 0, 0, 0.001, 0.001, 0.001);
                            Block.setShape(9, 0, 0, 0, 0.001, 0.001, 0.001);
                            Block.setShape(10, 0, 0, 0, 0.001, 0.001, 0.001);
                            Block.setShape(11, 0, 0, 0, 0.001, 0.001, 0.001);
                        } else {
                            lwtext = lamg[lang][9][0];
                            lw = true;
                            Block.setLightOpacity(8, 10);
                            Block.setLightOpacity(9, 10);
                            Block.defineBlock(8, "Water", [
                                ["still_water", 0]
                            ], 8, false, 4);
                            Block.defineBlock(9, "Stationary Water", [
                                ["still_water", 0]
                            ], 9, false, 4);
                            Block.setDestroyTime(8, 1);
                            Block.setDestroyTime(9, 1);
                            Block.setShape(8, 0, 0, 0, 1, 0.7, 1);
                            Block.setShape(9, 0, 0, 0, 1, 0.7, 1);
                            Block.setLightOpacity(10, 10);
                            Block.setLightOpacity(11, 10);
                            Block.defineBlock(10, "Lava", [
                                ["still_lava", 0]
                            ], 10, false, 4);
                            Block.defineBlock(11, "Stationary Lava", [
                                ["still_lava", 0]
                            ], 11, false, 4);
                            Block.setDestroyTime(10, 1);
                            Block.setDestroyTime(11, 1);
                            Block.setShape(10, 0, 0, 0, 1, 0.7, 1);
                            Block.setShape(11, 0, 0, 0, 1, 0.7, 1);
                        }
                        btnlw.setText("Liquid Walk: " + lwtext);
                    }
                }));
                var btnxray = newSpriteButton(desc.hack.xray);
                if (!xray) {
                    btnxray.setText(lamg[lang][5][0]);
                } else {
                    btnxray.setText(lamg[lang][5][1]);
                }
                btnxray.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (!xray) {
                            xray = true;
                            //Your Code Here...
                            Block.defineBlock(2, "Grass", ["glass", 0], 3, true, 20);
                            Block.defineBlock(1, "Stone", ["glass", 0], 3, true, 20);
                            Block.defineBlock(4, "Cobblestone", ["glass", 0], 3, true, 20);
                            Block.setDestroyTime(1, 1.5);
                            Block.setDestroyTime(4, 2);
                            Block.setDestroyTime(2, 0.6);
                            //Block.setRenderLayer(2, 1);
                            //Block.setRenderLayer(3, 1);
                            //Block.setRenderLayer(13, 1);
                            Block.setLightOpacity(1, 10);
                            Block.setLightLevel(1, 15);
                            Block.setLightOpacity(16, 0.1);
                            Block.setShape(16, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(16, 15);
                            Block.setLightOpacity(56, 0.1);
                            Block.setShape(56, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(56, 15);
                            Block.setLightOpacity(15, 0.1);
                            Block.setShape(15, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(15, 15);
                            Block.setLightOpacity(14, 0.1);
                            Block.setShape(14, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(14, 15);
                            Block.setLightOpacity(21, 0.1);
                            Block.setShape(21, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(21, 15);
                            Block.setLightOpacity(73, 0.1);
                            Block.setShape(73, 0.01, 0, 0, 0.99, 1, 1);
                            Block.setLightLevel(73, 15);
                        } else {
                            xray = false;
                            //Your Code Here...
                            //Block.setRenderLayer(1, 0);
                            //Block.setRenderLayer(2, 0);
                            //Block.setRenderLayer(3, 0);
                            //Block.setRenderLayer(13, 0);
                            Block.defineBlock(2, "Grass", [
                                ["dirt", 0],
                                ["grass", 2],
                                ["grass", 3],
                                ["grass", 3],
                                ["grass", 3],
                                ["grass", 3]
                            ]);
                            Block.defineBlock(1, "Stone", ["stone", 0]);
                            Block.defineBlock(4, "Cobblestone", ["cobblestone", 0]);
                            Block.setDestroyTime(1, 1.5);
                            Block.setDestroyTime(4, 2);
                            Block.setDestroyTime(2, 0.6);
                        }
                        if (!xray) {
                            btnxray.setText(lamg[lang][5][0]);
                        } else {
                            btnxray.setText(lamg[lang][5][1]);
                        }
                    }
                }));
                var btnwallh = newSpriteButton(desc.hack.wallhack);
                if (!wallh) {
                    btnwallh.setText("WallHack: " + lamg[lang][9][1]);
                } else {
                    btnwallh.setText("WallHack: " + lamg[lang][9][0]);
                }
                btnwallh.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (!wallh) {
                            btnwallh.setText("WallHack: " + lamg[lang][9][0]);
                            wallh = true;
                        } else {
                            btnwallh.setText("WallHack: " + lamg[lang][9][1]);
                            wallh = false;
                        }
                    }
                }));
                var btnaimbot = newSpriteButton(desc.hack.bowaimbot);
                if (!aimbot) {
                    btnaimbot.setText("BowAimbot: " + lamg[lang][9][1]);
                } else {
                    btnaimbot.setText("BowAimbot: " + lamg[lang][9][0]);
                }
                btnaimbot.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (!aimbot) {
                            btnaimbot.setText("BowAimbot: " + lamg[lang][9][0]);
                            aimbot = true;
                        } else {
                            btnaimbot.setText("BowAimbot: " + lamg[lang][9][1]);
                            aimbot = false;
                        }
                    }
                }));
                var btnjrcheat = newSpriteButton(desc.hack.jrhack);
                if (!jrcheat) {
                    btnjrcheat.setText("JRHack: " + lamg[lang][9][1]);
                } else {
                    btnjrcheat.setText("JRHack: " + lamg[lang][9][0]);
                }
                btnjrcheat.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (!jrcheat) {
                            btnjrcheat.setText("JRHack: " + lamg[lang][9][0]);
                            jrcheat = true;
                        } else {
                            btnjrcheat.setText("JRHack: " + lamg[lang][9][1]);
                            jrcheat = false;
                        }
                    }
                }));
                var btnsmine = newSpriteButton(desc.hack.smine);
                var sm = "normal";
                if (smine == 1) sm = "90%";
                if (smine == 2) sm = "75%";
                if (smine == 3) sm = "60%";
                if (smine == 4) sm = "instant";
                btnsmine.setText(lamg[lang][19] + ":\n" + sm);
                btnsmine.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        smine++;
                        if (smine > 4) smine = 0;
                        var sm = "normal";
                        if (smine == 1) sm = "90%";
                        if (smine == 2) sm = "75%";
                        if (smine == 3) sm = "60%";
                        if (smine == 4) sm = "instant";
                        btnsmine.setText(lamg[lang][19] + ":\n" + sm);
                        updateSmine();
                    }
                }));
                var btnfeat = newSpriteButton(desc.hack.feat);
                var fe = "normal";
                if (feat == 16) fe = "fast";
                if (feat == 1) fe = "instant";
                btnfeat.setText("FastEat:\n" + fe);
                btnfeat.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        switch (feat) {
                            case 1:
                                feat = 32;
                                break;
                            case 16:
                                feat = 1;
                                break;
                            case 32:
                                feat = 16;
                                break;
                            default:
                        }
                        var fe = "normal";
                        if (feat == 16) fe = "fast";
                        if (feat == 1) fe = "instant";
                        btnfeat.setText("FastEat:\n" + fe);
                        updateFEat();
                    }
                }));
                //singleplayer
                var btnxp = newSpriteButton(desc.sp.xp);
                btnxp.setText("Add XP");
                btnxp.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        xpd();
                    }
                }));
                var btnwmd = newSpriteButton(desc.sp.wmd);
                btnwmd.setText("Weather Manager");
                btnwmd.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        wmd();
                    }
                }));
                btnday = newSpriteButton(desc.sp.day);
                btnday.setMinWidth(ctx.getWindowManager().getDefaultDisplay().getWidth() / 2 - 10);
                btnday.setText(lamg[lang][18][0]);
                btnday.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Level.setTime(6000);
                    }
                }));
                btnnight = newSpriteButton(desc.sp.night);
                btnnight.setMinWidth(ctx.getWindowManager().getDefaultDisplay().getWidth() / 2 - 10);
                btnnight.setText(lamg[lang][18][1]);
                btnnight.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Level.setTime(18000);
                    }
                }));
                var btngod = newSpriteButton(desc.sp.godmode);
                btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][1]);
                if (godmode) btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][0]);
                btngod.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (softmode) {
                            softmode = !softmode;
                            if (softmode) {
                                btnsoft.setText(lamg[lang][17] + ": " + lamg[lang][9][0]);
                                Entity.setMaxHealth(Player.getEntity(), 2);
                                Entity.setHealth(Player.getEntity(), 2);
                            } else {
                                Entity.setMaxHealth(Player.getEntity(), 20);
                                Entity.setHealth(Player.getEntity(), 20);
                            }
                        }
                        godmode = !godmode;
                        btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][1]);
                        if (godmode) {
                            btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][0]);
                            Entity.setMaxHealth(Player.getEntity(), 10000);
                            Entity.setHealth(Player.getEntity(), 10000);
                        } else {
                            Entity.setMaxHealth(Player.getEntity(), 20);
                            Entity.setHealth(Player.getEntity(), 20);
                        }
                    }
                }));
                var btnench = newSpriteButton(desc.unknown);
                btnench.setText("Enchant");
                btnench.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        menu.dismiss();
                        if (hackermenu != null) {
                            hackermenu.dismiss();
                            hackermenu = null;
                        }
                        showmenubtn();
                        if (ghost)
                            fadeMenuBtn(200);
                        enchanter(Player.getSelectedSlotId());
                    }
                }));
                //Misc
                var btnghost = newSpriteButton(desc.misc);
                btnghost.setText("GhostMode: " + lamg[lang][9][1]);
                if (ghost)
                    btnghost.setText("GhostMode: " + lamg[lang][9][0]);
                btnghost.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        ghost = !ghost;
                        btnghost.setText("GhostMode: " + lamg[lang][9][1]);
                        if (ghost)
                            btnghost.setText("GhostMode: " + lamg[lang][9][0]);
                    }
                }));
                var btnsoft = newSpriteButton(desc.sp.softmode);
                btnsoft.setText("SoftMode: " + lamg[lang][9][1]);
                if (softmode) btnsoft.setText("SoftMode: " + lamg[lang][9][0]);
                btnsoft.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        softmode = !softmode;
                        btnsoft.setText("SoftMode: " + lamg[lang][9][1]);
                        if (godmode) {
                            godmode = !godmode;
                            btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][1]);
                            if (godmode) {
                                btngod.setText(lamg[lang][17] + ": " + lamg[lang][9][0]);
                                Entity.setMaxHealth(Player.getEntity(), 10000);
                                Entity.setHealth(Player.getEntity(), 10000);
                            } else {
                                Entity.setMaxHealth(Player.getEntity(), 20);
                                Entity.setHealth(Player.getEntity(), 20);
                            }
                        }
                        if (softmode) {
                            btnsoft.setText("SoftMode: " + lamg[lang][9][0]);
                            Entity.setMaxHealth(Player.getEntity(), 2);
                            Entity.setHealth(Player.getEntity(), 2);
                        } else {
                            Entity.setMaxHealth(Player.getEntity(), 20);
                            Entity.setHealth(Player.getEntity(), 20);
                        }
                    }
                }));
                var btnill = newSpriteButton(desc.server.illuminati);
                btnill.setText("Illuminati!?!?!");
                btnill.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Server.sendChat("      /\\");
                        Server.sendChat("     /  \\");
                        ctx.runOnUiThread(new java.lang.Runnable({
                            run: function() {
                                new android.os.Handler().postDelayed(new java.lang.Runnable({
                                    run: function() {
                                        Server.sendChat("    /    \\");
                                        Server.sendChat("   /   @  \\");
                                        ctx.runOnUiThread(new java.lang.Runnable({
                                            run: function() {
                                                new android.os.Handler().postDelayed(new java.lang.Runnable({
                                                    run: function() {
                                                        Server.sendChat("  /_______\\");
                                                        //Server.sendChat(" /________\\");

                                                    }
                                                }), /* Milliseconds between every call*/ 300);
                                            }
                                        }))
                                    }
                                }), /* Milliseconds between every call*/ 300);
                            }
                        }))
                    }
                }));
                var btnhealt = newSpriteButton(desc.misc);
                btnhealt.setText("");
                btnhealt.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {

                    }
                }));
                //info
                var btnextra = newSpriteButton(desc.info.extra);
                btnextra.setText("Extramenu");
                btnextra.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        extramenu();
                        exit2();
                        if (hackermenu) hackermenu.dismiss();
                        if (exitUI) exitUI.dismiss();
                        if (menu) menu.dismiss();
                    }
                }));
                /*btnabout.setOnClickListener(new android.view.View.OnClickListener({
                	  onClick: function(viewarg){
                hackermenu.dismiss();

                	  }
                	  }));
                	  */
                //Seeker
                //Example
                //Add Views
                menuLayout1.addView(newplaceholder());
                if (which == 1) {
                    //Hacks
                    menuLayout2.setOrientation(1);
                    menuLayout2.addView(textgamesped);
                    menuLayout2.addView(seekgamespeed);
                    menuLayout.addView(newbigplaceholder());
                    menuLayout.addView(btngamemode);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnspeed);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnfly);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnnig);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnskil);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnglide);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnlw);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnxray);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnwallh);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnfreecam);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnaimbot);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnjrcheat);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnsmine);
                    //menuLayout.addView(newplaceholder());
                    //menuLayout.addView(btnfeat);
                    menuLayout.addView(newbigplaceholder());
                }
                if (which == 2) {
                    //Server
                    menuLayout.addView(newbigplaceholder());
                    menuLayout.addView(btnspam);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnsendemptymes);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnphack);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnrandreg);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btncrash);
                    menuLayout.addView(newbigplaceholder());
                }
                if (which == 3) {
                    //Singleplayer
                    menuLayout2.setOrientation(0);
                    menuLayout2.addView(btnday);
                    menuLayout2.addView(btnnight);
                    menuLayout.addView(newbigplaceholder());
                    menuLayout.addView(btnxp);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnwmd);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btngod);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnench);
                    menuLayout.addView(newbigplaceholder());
                }
                if (which == 4) {
                    //Misc
                    menuLayout.addView(newbigplaceholder());
                    menuLayout.addView(btnghost);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnsoft);
                    menuLayout.addView(newplaceholder());
                    menuLayout.addView(btnill);
                    menuLayout.addView(newbigplaceholder());
                }
                menuLayout1.addView(menuLayout2);
                //something..
                menuLayout.setGravity(titlegravity);
                menuLayout1.setGravity(titlegravity);
                menuScroll.addView(menuLayout);
                menuLayout1.addView(menuScroll);
            } catch (e) {
                print("Oh crap Error line: " + e.lineNumber + " Error:" + e);
            }
            //Seeker
            //Example↓↓↓
            //Add Views
            //something..
            hackermenu = new android.widget.PopupWindow(menuLayout1, ctx.getWindowManager()
                .getDefaultDisplay()
                .getWidth(), android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
            /*
               print("height: "+ctx.getWindowManager().getDefaultDisplay().getHeight()+" width: "+ctx.getWindowManager().getDefaultDisplay().getWidth());
            print("height: "+ctx.getWindowManager().getDefaultDisplay().getHeight()+" width: "+ctx.getWindowManager().getDefaultDisplay().getWidth());

            print("height: "+ctx.getWindowManager().getDefaultDisplay().getHeight()+" width: "+ctx.getWindowManager().getDefaultDisplay().getWidth());
            */
            hackermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#" + themehtml)));
            hackermenu.setAnimationStyle(android.R.style.Animation_Dialog);
            hackermenu.showAtLocation(ctx.getWindow()
                .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, 0);
        }
    }));
}

function extramenu() {
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                var menuLayout = new android.widget.LinearLayout(ctx);
                var menuScroll = new android.widget.ScrollView(ctx);
                var menuLayout1 = new android.widget.LinearLayout(ctx);
                menuLayout.setOrientation(1);
                menuLayout1.setOrientation(1);
                menuScroll.addView(menuLayout);
                menuLayout1.addView(menuScroll);
                var btnmusik = new android.widget.Button(ctx);
                btnmusik.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnmusik.setText(lamg[lang][11] + " (Beta)");
                btnmusik.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        menu2.dismiss();
                        exitUI2.dismiss();
                        openbros("https:///www.soundcloud.com/");
                        showmenubtn();
                    }
                }));
                var btnscree = new android.widget.Button(ctx);
                btnscree.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnscree.setText(lamg[lang][12] + " (Beta)");
                btnscree.setOnClickListener(new android.view.View.OnClickListener({
                        onClick: function(viewarg) {
                            menu2.dismiss();
                            exitUI2.dismiss();
                            ModPE.takeScreenshot("screen");
                            showmenubtn();
                        }
                    }))
                    // menuLayout.addView(button);
                    //More buttons...
                var btnserver = new android.widget.Button(ctx);
                btnserver.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnserver.setText(lamg[lang][13]);
                var btnadvset = new android.widget.Button(ctx);
                btnadvset.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnadvset.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        advsetd();
                    }
                }));
                btnadvset.setText(lamg[lang][14]);
                var btnmods = new android.widget.Button(ctx);
                btnmods.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnmods.setText(lamg[lang][15]);
                btnmods.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        menu2.dismiss();
                        exitUI2.dismiss();
                        openbros("https://godsoft029.github.io/all_mods.html");
                        showmenubtn();
                    }
                }));
                menuLayout.addView(btnmusik);
                menuLayout.addView(btnscree);
                menuLayout.addView(btnserver);
                menuLayout.addView(btnadvset);
                menuLayout.addView(btnmods);
                menu2 = new android.widget.PopupWindow(menuLayout1, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 2, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getHeight());
                menu2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#" + themehtml)));
                menu2.showAtLocation(ctx.getWindow()
                    .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
            } catch (error) {
                print('An error occured: ' + error);
            }
        }
    }));
}

function advsetd() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle(lamg[lang][14]);
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var autochecker = new android.widget.CheckBox(ctx);
        autochecker.setText("Autoupdate");
        //print(audo);
        autochecker.setChecked(audo);
        //autochecker.setGravity(android.view.Gravity.CENTER);
        autochecker.setTextSize(textsize + 3);
        layout.addView(autochecker);
        alert2.setView(layout);
        alert2.setPositiveButton('Save', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                audo = autochecker.isChecked();
                file.rewrite(config, pref()[0].toString() + ";" + pref()[1] + ";" + audo + ";");
                toast("Saved!", 100);
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function xpd() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle("Add XP");
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var xpedit = new android.widget.EditText(ctx);
        xpedit.setHint("Add XP");
        xpedit.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
        layout.addView(xpedit);
        alert2.setView(layout);
        alert2.setPositiveButton('Add Xp', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                Player.addExp(xpedit.getText());
            }
        }));
        alert2.setNegativeButton('Cancel', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function spammsgd(btn) {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle("Set spam message");
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var spedit = new android.widget.EditText(ctx);
        spedit.setHint("Spam message");
        spedit.setText(spammsg);
        var lmsg = new android.widget.Button(ctx);
        lmsg.setText("Long msg");
        lmsg.setOnClickListener(new android.view.View.OnClickListener({
            onClick: function(viewarg) {
                var crashcode = "\10";
                var stackName = "";
                var builder = new java.lang.StringBuilder().append(crashcode);
                for (var i = 0; i < 250; i++) {
                    builder = new java.lang.StringBuilder().append(stackName);
                    stackName = builder.append("€").toString();
                }
                spedit.setText(stackName);
            }
        }));
        layout.addView(spedit);
        layout.addView(lmsg);
        alert2.setView(layout);
        alert2.setPositiveButton('Start spam', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                spammsg = spedit.getText()
                    .toString();
                eval(sspam ? sspam = false : sspam = true);
                return sspam;
            }
        }));
        alert2.setNegativeButton('Cancel', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                btn.setText("Server Spam: " + (sspam ? lamg[lang][9][1] : lamg[lang][9][0]));
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function wmd() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle("Weather Manager");
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var wstr = {
            getw: function() {
                if (Level.getLightningLevel() == 1) return "Thunder storm";
                if (Level.getRainLevel() == 1) return "Rain";
                return "Sun";
            }
        };
        var textweather = new android.widget.TextView(ctx);
        textweather.setText(wstr.getw());
        textweather.setGravity(titlegravity);
        textweather.setTextSize(titlesize - 5);
        var seekweather = new android.widget.SeekBar(ctx);
        seekweather.setMax(2);
        seekweather.setProgress(Level.getRainLevel() + Level.getLightningLevel());
        seekweather.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
            onStopTrackingTouch: function(view) {
                textweather.setText(wstr.getw());
            }
        }));
        layout.addView(textweather);
        layout.addView(seekweather);
        alert2.setView(layout);
        alert2.setPositiveButton('Set Weather', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                Level.setRainLevel(seekweather.getProgress());
                if (seekweather.getProgress() != 0) {
                    Level.setLightningLevel(seekweather.getProgress() - 1);
                } else {
                    Level.setLightningLevel(0);
                }
            }
        }));
        alert2.setNegativeButton('Cancel', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        toast(e, 2);
    }
}

function masstelld() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle(lamg[lang][14]);
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var telltext = new android.widget.TextView(ctx);
        var telledit = new android.widget.EditText(ctx);
        telltext.setText("Tell Message:");
        telltext.setTextSize(textsize + 3);
        telledit.setTextSize(textsize + 3);
        layout.addView(telltext);
        layout.addView(telledit);
        alert2.setView(layout);
        alert2.setPositiveButton('Save', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                masstellmsg = telledit.getText()
                    .toString();
                masstell = true;
                toast("Sending message...", 100);
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function leetspeakd() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert2 = new android.app.AlertDialog.Builder(ctx);
        alert2.setTitle("Leet Speak");
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        //Buttons, Texts...
        var telltext = new android.widget.TextView(ctx);
        var telledit = new android.widget.EditText(ctx);
        telltext.setText("Text to send:");
        telltext.setTextSize(textsize + 3);
        telledit.setTextSize(textsize + 3);
        layout.addView(telltext);
        layout.addView(telledit);
        alert2.setView(layout);
        alert2.setPositiveButton('Save', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
                masstellmsg = telledit.getText()
                    .toString();
                toast("Sending message...", 100);
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert2.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function serverd() {
    try {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        var alert1 = new android.app.AlertDialog.Builder(ctx);
        alert1.setTitle('Server');
        var scroll = new android.widget.ScrollView(ctx);
        var layout = new android.widget.LinearLayout(ctx);
        layout.setOrientation(1);
        var infotext = new android.widget.TextView(ctx);
        infotext.setTextSize(18);
        infotext.setText("Komme auf einen coolen Survival und PvP Server!");
        infotext.setGravity(android.view.Gravity.CENTER);
        var iptext = new android.widget.TextView(ctx);
        iptext.setText("IP: mc1.hk-hosting.de\nPort: 25573");
        iptext.setTextSize(18);
        iptext.setGravity(android.view.Gravity.CENTER);
        layout.addView(infotext);
        layout.addView(iptext);
        alert1.setView(layout);
        alert1.setPositiveButton('Ok', new android.content.DialogInterface.OnClickListener({
            onClick: function(viewarg) {
                //Your Code Here...
            }
        }));
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var dialoger = alert1.create();
                dialoger.show();
            }
        }));
    } catch (e) {
        print(e);
    }
}

function dip2px(dips) {
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    return Math.ceil(dips * ctx.getResources()
        .getDisplayMetrics()
        .density);
}

function windowMenu() {
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            if (menu2 != null) {
                exitUI2.dismiss();
                menu2.dismiss();
                menu2 = null;
            }
            try {
                var menuLayout = new android.widget.LinearLayout(ctx);
                var menuScroll = new android.widget.ScrollView(ctx);
                var menuLayout1 = new android.widget.LinearLayout(ctx);
                var menuLayout2 = new android.widget.LinearLayout(ctx);
                var menuLayout3 = new android.widget.LinearLayout(ctx);
                menuLayout.setOrientation(0);
                menuLayout1.setOrientation(0);
                menuLayout2.setOrientation(1);
                /*
                var rightpar = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT); rightpar.addRule(android.widget.RelativeLayout.ALIGN_RIGHT);
                */
            } catch (e) {
                print("Linear Fail :" + e);
            }
            try {
                //functions...
                //textviews...
                var title = new android.widget.TextView(ctx);
                title.setTextSize(titlesize);
                title.setText(lamg[lang][0]);
                title.setGravity(titlegravity);
                /*
 if(themehtml=="00000000"){
title.setBackgroundColor(android.graphics.Color.parseColor("#000000"));
}else{ 
title.setBackgroundColor(android.graphics.Color.parseColor("#"+themehtml));

}
*/
                title.setBackgroundColor(android.graphics.Color.parseColor("#00000000"));
                /*title.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));*/
                title.setTextColor(android.graphics.Color.parseColor("#ffffff"));
                title.setWidth(ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 11 * 8);
                title.setSingleLine(true);
                var xButton = new android.widget.Button(ctx);
                var xButton2 = new android.widget.Button(ctx);
                xButton.setWidth(ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 10.5 * 0.8);
                xButton2.setWidth(ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 10.5 * 0.8);
                xButton.setText('X');
                xButton.setTextSize(30);
                xButton2.setText('X');
                xButton2.setTextSize(30);
                /*Button.setBackgroundColor(android.graphics.Color.parseColor("#000000"));*/
                if (themehtml == "d32f2f") {} else {
                    xButton.setTextColor(android.graphics.Color.RED);
                }
                xButton.setTextColor(android.graphics.Color.RED);
                xButton2.setTextColor(android.graphics.Color.RED);
                xButton.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        menu.dismiss();
                        if (hackermenu != null) {
                            hackermenu.dismiss();
                            hackermenu = null;
                        }
                        showmenubtn();
                        if (ghost)
                            fadeMenuBtn(200);
                    }
                }));
                xButton2.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        menu.dismiss();
                        if (hackermenu != null) {
                            hackermenu.dismiss();
                            hackermenu = null;
                        }
                        showmenubtn();
                        if (ghost)
                            fadeMenuBtn(200);
                    }
                }));
				if(lsd){
					xButton.getBackground().setAlpha(100);
					xButton2.getBackground().setAlpha(100);
				}
                xButton.setGravity(android.view.Gravity.CENTER);
                //menuLayout3.setGravity(android.view.Gravity.CENTER_VERTICAL);
                menuLayout3.addView(xButton2);
                menuLayout3.addView(title);
                menuLayout3.addView(xButton);
				var mlg = new android.graphics.drawable.BitmapDrawable(ctx.getResources(), bg);
				mlg.setAlpha(100);
                var drawbtg = mlg;
                menuLayout3.setBackground(drawbtg);
                //menuLayout3.addView(xButton);
                menuLayout2.addView(menuLayout3);
                //checker...
                //butooncheats
                var btnserver = newSpriteButton(desc.mitem);
                btnserver.setText("Server");
                btnserver.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        hackmenu(2);
                    }
                }));
                var btnhacks = newSpriteButton(desc.mitem);
                btnhacks.setText("Hacks");
                btnhacks.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        hackmenu(1);
                    }
                }));
                var btnsp = newSpriteButton(desc.mitem);
                btnsp.setText("Single Player");
                btnsp.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        hackmenu(3);
                    }
                }));
                var btnmisc = newSpriteButton(desc.mitem);
                btnmisc.setText("Misc");
                btnmisc.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        hackmenu(4);
                    }
                }));
                var btnabout = new android.widget.Button(ctx);
                btnabout.setText(lamg[lang][2]);
                btnabout.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnabout.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        hackmenu(1);
                    }
                }));
                var updater = new android.widget.Button(ctx);
                updater.setText("Update!");
                updater.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                updater.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        updatemod();
                    }
                }));
                //Seeker
                //Example↓↓↓
                //Add Views
                menuLayout.addView(btnhacks);
                menuLayout.addView(newplaceholder());
                menuLayout.addView(btnserver);
                menuLayout.addView(newplaceholder());
                menuLayout.addView(btnsp);
                menuLayout.addView(newplaceholder());
                menuLayout.addView(btnmisc);
                //something..
                menuLayout.setGravity(titlegravity);
                menuLayout1.setGravity(titlegravity);
                menuScroll.addView(menuLayout);
                menuLayout1.addView(menuScroll);
                menuLayout2.addView(menuLayout1);
                if (upavi) {
                    menuLayout2.addView(updater);
                } else {
                    menuLayout2.addView(newplaceholder());
                }
                menu = new android.widget.PopupWindow(menuLayout2, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth(), ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getHeight() / 2.5);
                menu = new android.widget.PopupWindow(menuLayout2, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth(), android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#" + themehtml)));
                menu.setAnimationStyle(android.R.style.Animation_Dialog);
                menu.showAtLocation(ctx.getWindow()
                    .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
                hackmenu(1);
            } catch (error) {
                print('An error occured: ' + error);
            }
        }
    }));
}

function mainMenu() {
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                var menuLayout = new android.widget.LinearLayout(ctx);
                var menuScroll = new android.widget.ScrollView(ctx);
                var menuLayout1 = new android.widget.LinearLayout(ctx);
                menuLayout.setOrientation(1);
                menuLayout1.setOrientation(1);
                menuScroll.addView(menuLayout);
                menuLayout1.addView(menuScroll);
                //functions...
                function aboutmod() {
                    toast(About, 3);
                }
                //textviews...
                var title = new android.widget.TextView(ctx);
                var sprinttext = new android.widget.TextView(ctx);
                title.setTextSize(titlesize);
                //title.setText("Servicehack "+ver+"\n by GodGamer029 and SoftGameRat");
                title.setText(lamg[lang][0]);
                /*
                	if(sprinter!=0){
                	sprinttext.setText(lamg[lang][1]+": "+sprinter);
                	}else{
                		sprinttext.setText(lamg[lang][1]+": "+-25);
                		}*/
                sprinttext.setText(lamg[lang][1] + ": " + (sprinter));
                title.setGravity(titlegravity);
                sprinttext.setGravity(textgravity);
                if (themehtml == 00000000) {
                    title.setTextColor(android.graphics.Color.parseColor("#000000"));
                } else {
                    title.setTextColor(android.graphics.Color.parseColor("#ffffff"));
                }
                sprinttext.setTextColor(textcolor);
                sprinttext.setTextSize(textsize);
                //checker...
                var xcheck = new android.widget.CheckBox(ctx);
                if (!xray) {
                    xcheck.setText(lamg[lang][5][0]);
                } else {
                    xcheck.setText(lamg[lang][5][1]);
                }
                xcheck.setChecked(xray);
                xcheck.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (!xray) {
                            xray = true;
                            //Your Code Here...
                            Block.defineBlock(2, "Grass", ["glass", 0], 3, true, 20);
                            Block.defineBlock(1, "Stone", ["glass", 0], 3, true, 20);
                            Block.defineBlock(4, "CObblestone", ["glass", 0], 3, true, 20);
                        } else {
                            xray = false;
                            //Your Code Here...
                            Block.defineBlock(2, "Grass", [
                                ["dirt", 0],
                                ["grass", 2],
                                ["grass", 3],
                                ["grass", 3],
                                ["grass", 3],
                                ["grass", 3]
                            ]);
                            Block.defineBlock(1, "Stone", ["stone", 0]);
                            Block.defineBlock(4, "Cobblestone", ["cobblestone", 0]);
                        }
                        xcheck.setChecked(xray);
                        if (!xray) {
                            xcheck.setText(lamg[lang][5][0]);
                        } else {
                            xcheck.setText(lamg[lang][5][1]);
                        }
                    }
                }));
                //butooncheats
                var btnfreecam = new android.widget.Button(ctx);
                btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                btnfreecam.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (imob == 1) {
                            createfree();
                            imob = 0;
                            btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                        } else {
                            ModPE.setCamera(Player.getEntity());
                            Entity.remove(e);
                            e = null;
                            imob = 1;
                            btnfreecam.setText("Freecam: " + lamg[lang][9][imob]);
                        }
                    }
                }));
                var btnnig = new android.widget.Button(ctx);
                btnnig.setText(lamg[lang][8][nightvis]);
                btnnig.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (nightvis == 0) {
                            Block.setLightLevel(blo, 15);
                            nightvis = 1;
                        } else {
                            Block.setLightLevel(blo, 0);
                            nightvis = 0;
                        }
                        btnnig.setText(lamg[lang][8][nightvis]);
                    }
                }));
                gamemode = Level.getGameMode();
                var textgamemode = new android.widget.TextView(ctx);
                textgamemode.setText(lamg[lang][6][gamemode]);
                var Btngamemode = new android.widget.Button(ctx);
                Btngamemode.setText(lamg[lang][6][gamemode]);
                Btngamemode.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (gamemode == 0) {
                            var c = new Array(Entity.getCarriedItem(Player.getEntity()), Entity.getCarriedItemCount(Player.getEntity()), Entity.getCarriedItemData(Player.getEntity()));
                            Level.setGameMode(1);
                            Entity.setCarriedItem(Player.getEntity(), c[0], c[1], c[2])
                            fly = Player.canFly();
                            if (!fly) {
                                btnfly.setText(lamg[lang][7][0]);
                            } else {
                                btnfly.setText(lamg[lang][7][1]);
                            }
                        } else if (gamemode == 1) {
                            Level.setGameMode(0);
                            fly = Player.canFly();
                            if (!fly) {
                                btnfly.setText(lamg[lang][7][0]);
                            } else {
                                btnfly.setText(lamg[lang][7][1]);
                            }
                        }
                        gamemode = Level.getGameMode();
                        Btngamemode.setText(lamg[lang][6][gamemode]);
                    }
                }));
                fly = Player.canFly();
                var btnfly = new android.widget.Button(ctx);
                if (!fly) {
                    btnfly.setText(lamg[lang][7][0]);
                } else {
                    btnfly.setText(lamg[lang][7][1]);
                }
                btnfly.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (fly) {
                            if (gamemode != 1) {
                                Player.setCanFly(false);
                                fly = false;
                            } else {}
                        } else {
                            fly = true;
                            Player.setCanFly(true);
                        }
                        fly = Player.canFly();
                        if (!fly) {
                            btnfly.setText(lamg[lang][7][0]);
                        } else {
                            btnfly.setText(lamg[lang][7][1]);
                        }
                    }
                }));
                var textgamesped = new android.widget.TextView(ctx);
                textgamesped.setText("Gamespeed: " + (gamespeed + 3) * 5);
                textgamesped.setGravity(textgravity);
                textgamesped.setTextSize(textsize);
                textgamesped.setTextColor(textcolor);
                var seekgamespeed = new android.widget.SeekBar(ctx);
                seekgamespeed.setMax(10);
                seekgamespeed.setProgress(gamespeed - 1);
                seekgamespeed.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
                    onStopTrackingTouch: function(view) {
                        try {
                            gamespeed = seekgamespeed.getProgress() + 1;
                            ModPE.setGameSpeed((gamespeed + 3) * 5);
                            textgamesped.setText("Gamespeed: " + (gamespeed + 3) * 5);
                        } catch (e) {
                            toast("Error Code 2: " + e, 2);
                        }
                    }
                }));
                var btnskil = new android.widget.Button(ctx);
                btnskil.setText("EAura");
                if (!entmov) {
                    btnskil.setText("EAura: " + lamg[lang][9][1]);
                } else {
                    btnskil.setText("EAura: " + lamg[lang][9][0]);
                }
                btnskil.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        if (entmov) {
                            btnskil.setText("EAura: " + lamg[lang][9][1]);
                            entmov = false;
                        } else {
                            entmov = true;
                            btnskil.setText("EAura: " + lamg[lang][9][0]);
                        }
                    }
                }));
                var btnspam = new android.widget.Button(ctx);
                btnspam.setText("Server Spam: " + (sspam ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnspam.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        eval(btnspam.setText("Server Spam: " + (sspam ? lamg[lang][9][1] : lamg[lang][9][0])));
                        eval(sspam ? sspam = false : sspam = true);
                    }
                }));
                var btnglide = new android.widget.Button(ctx);
                btnglide.setText("Glide(Beta): " + (glide ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnglide.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        eval(btnglide.setText("Glide(Beta): " + (glide ? lamg[lang][9][1] : lamg[lang][9][0])));
                        eval(glide ? glide = false : glide = true);
                    }
                }));
                var btnenab = new android.widget.Button(ctx);
                btnenab.setText("Enable Multiplayer(Beta)");
                btnenab.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        var sender = "";
                        var str = "\u00a70BlockLauncher, enable scripts";
                        net.zhuoweizhang.mcpelauncher.ScriptManager.handleMessagePacketCallback(sender, str);
                        /*
                        net.zhuoweizhang.mcpelauncher.ScriptManager.selectLevelCallback("servr",  "server");
                        */
                    }
                }));
                var btnphack = new android.widget.Button(ctx);
                btnphack.setText("PassHack(Beta): " + (phack ? lamg[lang][9][0] : lamg[lang][9][1]));
                btnphack.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        eval(btnphack.setText("PassHack(Beta): " + (phack ? lamg[lang][9][1] : lamg[lang][9][0])));
                        eval(phack ? phack = false : phack = true);
                    }
                }));
                var btnmasstell = new android.widget.Button(ctx);
                btnmasstell.setText("Mass Tell(Beta)");
                btnmasstell.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        masstelld();
                    }
                }));
                var btnleetspeak = new android.widget.Button(ctx);
                btnleetspeak.setText("Leet Speak");
                var btnsendemptymes = new android.widget.Button(ctx);
                btnsendemptymes.setText("SEM");
                btnsendemptymes.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        Server.sendChat(empt + empt + empt);
                    }
                }));
                //More xchecks...
                var btnserver = new android.widget.Button(ctx);
                btnserver.setText("Cooler Server!");
                btnserver.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnserver.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        serverd();
                    }
                }));
                var btnextra = new android.widget.Button(ctx);
                btnextra.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnextra.setText(lamg[lang][10]);
                btnextra.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        extramenu();
                        exit2();
                    }
                }));
                var btnabout = new android.widget.Button(ctx);
                btnabout.setText(lamg[lang][2]);
                btnabout.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnabout.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        aboutmod();
                    }
                }));
                var btnsett = new android.widget.Button(ctx);
                btnsett.setText(lamg[lang][3]);
                btnsett.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                btnsett.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        configd1();
                    }
                }));
                var updater = new android.widget.Button(ctx);
                updater.setText("Update!");
                updater.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                updater.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        updatemod();
                    }
                }));
                var follg = android.widget.Button(ctx);
                follg.setText(lamg[lang][4]);
                follg.setBackgroundColor(android.graphics.Color.parseColor("#" + themehtml));
                follg.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        try {
                            openbro("https://plus.google.com/communities/103392401584364781053");
                        } catch (e) {
                            toast("Error Code 1: " + e, 2);
                        }
                    }
                }));
                //Seeker
                var sprint = new android.widget.SeekBar(ctx);
                sprint.setMax(99);
                // sprint.setMin(1);
                sprint.setProgress(sprinter);
                /*      sprint.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener(
                	  {
                	  onStopTrackingTouch: function(view)
                	  {
                	  sprinter = sprint.getProgress();
                	  print(sprinter);
                	  }
                	  }));*/
                sprint.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
                    onStopTrackingTouch: function(view) {
                        sprinter = sprint.getProgress();
                        sprinttext.setText(lamg[lang][1] + ": " + (sprinter));
                    }
                }));
                //Example↓↓↓
                //Add Views
                menuLayout.addView(title);
                //menuLayout.addView(sprinttext);
                //menuLayout.addView(sprint);
                //menuLayout.addView(xcheck);
                //menuLayout.addView(textgamemode);
                menuLayout.addView(Btngamemode);
                menuLayout.addView(btnfly);
                menuLayout.addView(btnglide);
                menuLayout.addView(textgamesped);
                menuLayout.addView(seekgamespeed);
                menuLayout.addView(btnnig);
                //menuLayout.addView(btnfreecam);
                menuLayout.addView(btnskil);
                menuLayout.addView(btnspam);
                menuLayout.addView(btnenab);
                menuLayout.addView(btnphack);
                menuLayout.addView(btnsendemptymes);
                //menuLayout.addView(btnmasstell);
                /*
                if(lang==1){
                menuLayout.addView(btnserver);
                }*/
                menuLayout.addView(btnextra);
                menuLayout.addView(btnabout);
                menuLayout.addView(btnsett);
                menuLayout.addView(follg);
                if (upavi) {
                    menuLayout.addView(updater);
                }
                //something...
                menu = new android.widget.PopupWindow(menuLayout1, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getWidth() / 2, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getHeight());
                //menu.setBackgroundDrawable(android.graphics.Color.parseColor("#"+themehtml).setAlpha(75));
                //menu.setBackgroundDrawable(android.graphics.Color.parseColor("#EEEEEE"));
                menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#" + themehtml)));
                menu.showAtLocation(ctx.getWindow()
                    .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
            } catch (error) {
                print('An error occured: ' + error);
            }
        }
    }));
}

function exit() {
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({
        run: function() {
            try {
                var xLayout = new android.widget.LinearLayout(ctxe);
                var xButton = new android.widget.Button(ctx);
                xButton.setText('X');
                xButton.setTextSize(30);
                /*Button.setBackgroundColor(android.graphics.Color.parseColor("#000000"));*/
                if (themehtml == "d32f2f") {
                    xButton.setTextColor(android.graphics.Color.WHITE);
                } else {
                    xButton.setTextColor(android.graphics.Color.RED);
                }
                xButton.setOnClickListener(new android.view.View.OnClickListener({
                    onClick: function(viewarg) {
                        exitUI.dismiss();
                        menu.dismiss();
                        if (hackermenu != null) {
                            hackermenu.dismiss();
                            hackermenu = null;
                        }
                        showmenubtn();
                    }
                }));
                xLayout.addView(xButton);
                exitUI = new android.widget.PopupWindow(xLayout, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
                /*exitUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));*/
                exitUI.showAtLocation(ctxe.getWindow()
                    .getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, ctx.getWindowManager()
                    .getDefaultDisplay()
                    .getHeight() / 2);
            } catch (exception) {
                print(exception);
            }
        }
    }));
}
/*
  function leaveGame(){
  var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
  ctx.runOnUiThread(new java.pref.Runnable({ run: function(){
  if(GUI != null){
  GUI.dismiss();
  GUI = null;
  }
  if(menu != null){
  menu.dismiss();
  menu = null;
  }
  if(exitUI != null){
  exitUI.dismiss();
  exitUI = null;
  }
  }}));
  }
*/
function leaveGame() {
    online = false;
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            if (menu != null) {
                menu.dismiss();
                menu = null;
            }
            if (GUI == null) {
                showmenubtn();
            }
            if (hackermenu != null) {
                hackermenu.dismiss();
                hackermenu = null;
            }
            if (exitUI != null) {
                exitUI.dismiss();
                exitUI = null;
            }
        }
    }));
}

function modTick() {
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {}
    }));
    if (sprinter != 0) {
        if (i == 1) {
            px = getPlayerX();
            py = getPlayerY();
            pz = getPlayerZ();
            i = i + 1;
        } else if (i == 3) {
            i = 1;
            Xdiff = getPlayerX() - px;
            Zdiff = getPlayerZ() - pz;
            setVelX(getPlayerEnt(), Xdiff * (1 + ((sprinter + 1) / 225)));
            setVelZ(getPlayerEnt(), Zdiff * (1 + ((sprinter + 1) / 225)));
            Xdiff = 0;
            Zdiff = 0;
        }
        if (i != 1) {
            i = i + 1;
        }
    }
}

function entityRemovedHook(entity) {
    if (entity == e) {
        ModPE.setCamera(Player.getEntity());
        e = null;
        imob = 1;
    }
}

function useItem(x, y, z, itemId, blockId, side) {
    if (jrcheat) {
        //Huh? Dont copy
        var p = Player.getEntity();
        setVelX(p, ((x + 0.5 - getPlayerX()) / 5));
        setVelZ(p, ((z + 0.5 - getPlayerZ()) / 5));
        if (((y + 2.55 - getPlayerY()) / 5) + 0.425 < 0) {
            setVelY(p, ((y + 2.55 - getPlayerY()) / 5) + 0.7);
        } else {
            setVelY(p, ((y + 2.55 - getPlayerY()) / 5) + 0.425);
        }
    }
}
var tick = 0;

function every() {
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {
                        nx = getPlayerX();
                        ny = getPlayerY();
                        nz = getPlayerZ();

                        tick++;
                        if (tick >= 3000) {
                            tick = 0;
                            if (pref().length > 2) {
                                if (pref()[3] == "true" || pref()[3] == "true\n") {
                                    collectGA();
                                }
                            }
                        }
                        if (tick % 100 <= 0.01) {
                            try {
                                /*
                                setVelY(Player.getEntity(),0.01);
                                if(Entity.getVelY(Player.getEntity())==0.01)print("Yo!!!");*/
                            } catch (e) {

                            }
                        }
						if(lsd && hackermenu != null && hackermenu.isShowing()){
							lsdcolor.unshift(android.graphics.Color.rgb(Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)));
							while(lsdcolor.length > 10) {
								lsdcolor.pop();
							}
							while(lsdcolor.length < 3)lsdcolor.unshift(android.graphics.Color.rgb(Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)));
							var bg = new android.graphics.drawable.GradientDrawable();
							bg.mutate().setColors(lsdcolor);
							hackermenu.getContentView().setBackgroundDrawable(bg);
							menu.getContentView().setBackgroundDrawable(bg);
						}
                        online = !(Server.getAddress() == null || Server.getAddress().startsWith("192.168"));
                        try {
                            try {
                                inject.every();
                            } catch (e) {}
                            if (dat && e) {
                                if (getYaw(Player.getEntity()) > 360) Entity.setRot(Player.getEntity(), 0, getPitch(Player.getEntity()));
                                ModPE.setCamera(dat);
                                setVelY(dat, -0.07);
                                setPosition(Player.getEntity(), ox, oy, oz);
                                Entity.setPosition(dat, Entity.getX(dat) + (nx - ox), Entity.getY(dat) + (ny - oy), Entity.getZ(dat) + (nz - oz));
                                Entity.setRot(dat, getYaw(Player.getEntity()), getPitch(Player.getEntity()));
                            }
                        } catch (e) {
                            print(e);
                        }
                        //glide
                        if (glide) {
                            try {
                                if (c < 256) {
                                    Entity.setCarriedItem(Player.getEntity(), c + 1, 1, 0);
                                    c++;
                                }
                                if (c > 250) {
                                    c = 0;
                                }
                            } catch (e) {
                                c++;
                            }
                            if (Entity.getVelY(Player.getEntity()) <= 0) {
                                setVelY(Player.getEntity(), -0.07);
                            }
                        }
                        //passwordha passhack
                        if (phack) {
                            if (pass[passi] != null) {
                                if (nor >= 0) {
                                    clientMessage("Trying the " + passi + "th password " + pass[0]);
                                    Server.sendChat("/login " + pass.shift());
                                    //Server.sendChat(pass[passi]);
                                    passi++;
                                    nor = 0;
                                } else {
                                    nor++;
                                }
                            } else {
                                phack = false;
                                toast("Tried about 1 Million Password Combinations!", 1);
                                getpass();
                                passi = 0;
                            }
                        }
                        //masstell
                        if (masstell) {
                            masstell = false;
                            var players = Server.getAllPlayers();
                            clientMessage("angefangen");
                            //clientMessage();
                            clientMessage(players[0].getName());
                            for (var i = 0; i < players.length; i++) {
                                Server.sendChat("/tell " + players[i] + " " + masstellmsg);
                            }
                        }
                        //srverspam
                        if (sspam) {
                            var r = new java.lang.Runnable({
                                run: function() {
                                    var stackName = spammsg;
                                    builder = new java.lang.StringBuilder()
                                        .append(spammsg);
                                    stackName = builder.toString();
                                    for (var i = 0; i < 10; i++) {
                                        /*
                                        			 builder = new java.lang.StringBuilder().append(stackName);

                                        			stackName = builder.append("ol").toString();

                                        	*/
                                        Server.sendChat(stackName);
                                    }
                                    Server.sendChat(stackName);
                                }
                            });
                            var th = new java.lang.Thread(r);
                            th.start();
                        }
                        //liquidwalk
                        /*
                        	if(lw){
                        		Block.setLightOpacity(8, 10);
                        		Block.setLightOpacity(9, 10);
                        		Block.defineBlock(8, "Water", [["still_water", 0]], 8, false, 4);
                        		Block.defineBlock(9, "Stationary Water", [["still_water", 0]], 9, false, 4);
                        		Block.setDestroyTime(8, 1);
                        		Block.setDestroyTime(9, 1);
                        		Block.setShape(8, 0, 0, 0, 1, 0.6, 1);
                        		Block.setShape(9, 0, 0, 0, 1, 0.6, 1);
                        		}else{
                        			Block.setShape(8, 0, 0, 0, 0.001, 0.001, 0.001);
                        		Block.setShape(9, 0, 0, 0, 0.001, 0.001, 0.001);
                        			}
                        */
                        //eaura
                        if (entmov) {
                            var mobs = Entity.getAll();
                            for (var i = 0; i < mobs.length; i++) {
                                var x = Entity.getX(mobs[i]) - getPlayerX();
                                var y = Entity.getY(mobs[i]) - getPlayerY();
                                var z = Entity.getZ(mobs[i]) - getPlayerZ();
                                if (x * x + y * y + z * z <= 9 * 9 && x * x + y * y + z * z >= 0.001 && mobs[i] !== Player.getEntity() && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
                                    y = y + 0.5;
                                    var a = 0.5 + Entity.getX(mobs[i]);
                                    var b = Entity.getY(mobs[i]);
                                    var c = 0.5 + Entity.getZ(mobs[i]);
                                    var len = Math.sqrt(x * x + y * y + z * z);
                                    var y = y / len;
                                    var pitch = Math.asin(y);
                                    pitch = pitch * 180.0 / Math.PI;
                                    pitch = -pitch;
                                    if (pitch < 90 && pitch > -90) {
                                        Entity.setRot(Player.getEntity(), -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + 0.5)) * (180 / Math.PI), pitch);
                                    }
                                }
                            }
                        }
                        if (aimbot) {
                            var mobs = Entity.getAll();
                            for (var i = 0; i < mobs.length; i++) {
                                var x = Entity.getX(mobs[i]) - getPlayerX();
                                var y = Entity.getY(mobs[i]) - getPlayerY();
                                var z = Entity.getZ(mobs[i]) - getPlayerZ();
                                if (x * x + y * y + z * z <= 100 * 100 && x * x + y * y + z * z >= 0.001 && mobs[i] !== Player.getEntity() && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
                                    y = y + 0.5;
                                    var a = 0.5 + Entity.getX(mobs[i]);
                                    var b = Entity.getY(mobs[i]);
                                    var c = 0.5 + Entity.getZ(mobs[i]);
                                    var len = Math.sqrt(x * x + y * y + z * z);
                                    var y = y / len;
                                    var pitch = Math.asin(y);
                                    pitch = pitch * 180.0 / Math.PI;
                                    pitch = -pitch;
                                    if (pitch < 90 && pitch > -90) {
                                        aimAt(mobs[i]);
                                    }
                                }
                            }
                        }
                        if (wallh) {
                            if (tick >= 20) tick = 0;
                            if (tick == 0) {
                                for (var i = 0; i <= 256; i++) {
                                    if (i == 26) {
                                        Block.setShape(i, 0.001, 0, 0.001, 0.999, 0.56, 0.999);
                                    } else if (Block.getRenderType(i) == 0 || Block.getRenderType(i) == 31) {
                                        Block.setShape(i, 0.001, 0, 0.001, 0.999, 1, 0.999);
                                    }
                                }
                            }
                            if (tick != 0 && tick <= 10) {
                                for (var i = 0; i <= 256; i++) {
                                    if (i == 26) {
                                        Block.setShape(i, 0, 0, 0, 1, 0.56, 1);
                                    } else if (Block.getRenderType(i) == 0 || Block.getRenderType(i) == 31) {
                                        Block.setShape(i, 0, 0, 0, 1, 1, 1);
                                    }
                                }
                            }
                            tick++;
                        }
                        if (Player.getEntity() == 0) godmode = false;
                        if (godmode) {
                            //add some hearts '_'
                            Entity.setHealth(Player.getEntity(), 10000);
                        }
                        if (!ghost) {
                            ModPE.langEdit("menu.copyright", "Servicehack by GodSoft029");
                            ModPE.langEdit("playscreen.header.local", "Choose world to §cHack");
                            ModPE.langEdit("createWorldScreen.progress.local", "Generating new hacked world...");
                            ModPE.langEdit("progressScreen.generating", "Hacking your world, please wait...");
                            ModPE.langEdit("progressScreen.message.locating", "Hacking server, please wait...");
                        } else {
                            ModPE.langEdit("menu.copyright", langVal[0]);
                            ModPE.langEdit("playscreen.header.local", langVal[1]);
                            ModPE.langEdit("createWorldScreen.progress.local", langVal[2]);
                            ModPE.langEdit("progressScreen.generating", langVal[3]);
                            ModPE.langEdit("progressScreen.message.locating", langVal[4]);
                        }
                        try {
                            if ( /*net.zhuoweizhang.mcpelauncher.ScriptManager.this.isScriptingEnabled()==false&&*/ GUI != null && GUI.isShowing() == false && (hackermenu == null || hackermenu.isShowing() == false)) {
                                /*var sender = "";
                                					var str = "\u00a70BlockLauncher, enable scripts";
                                					net.zhuoweizhang.mcpelauncher.ScriptManager.handleMessagePacketCallback(sender, str);*/
                                net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;
                                net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);
                                online = true;
                            }
                        } catch (e) {
                            print(e);
                        }
                        if (GUI != null && GUI.isShowing() == false && (hackermenu == null || hackermenu.isShowing() == false)) showmenubtn();
                        /*if(!GUI && !hackermenu)showMenuBtn();*/
                        eval(every());
                    }
                }), 1000 / 70);
        }
    }))
}
every();

function randomdialog() {
    var gplus = "https://plus.google.com/communities/103392401584364781053";
    var yt = "https://www.youtube.com/channel/UC-xQyDrNsxB0yDLJ5dWLHmQ";
    if (Math.random() <= 0.030) {
        try {
            var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
            var alert2 = new android.app.AlertDialog.Builder(ctx);

            var layout = new android.widget.LinearLayout(ctx);
            layout.setOrientation(1);
            //Buttons, Texts...
            var text = new android.widget.TextView(ctx);
            var link = gplus,
                pos = "Join the group";
            if (Math.random() >= 0.5) {
                alert2.setTitle("Servicehack group");
                text.setText("Do you have nice ideas?\nOr found a bug?\nThen Join our Google+ Group!");
            } else {
                alert2.setTitle("YouTube");
                text.setText("We have a YouTube channel! There we upload some Mod reviews, Devlogs and other stuff!");
                link = yt;
                pos = "Show me!";
            }
            text.setTextSize(20);
            text.setGravity(android.view.Gravity.CENTER);
            layout.addView(text);
            layout.setGravity(android.view.Gravity.CENTER);
            alert2.setView(layout);
            alert2.setPositiveButton(pos, new android.content.DialogInterface.OnClickListener({
                onClick: function(viewarg) {
                    //Your Code Here...
                    openbro(link);
                }
            }));
            alert2.setNegativeButton("No", new android.content.DialogInterface.OnClickListener({
                onClick: function(viewarg) {
                    //Your Code Here...
                }
            }));
            ctx.runOnUiThread(new java.lang.Runnable({
                run: function() {
                    var dialoger = alert2.create();
                    dialoger.show();
                }
            }));
        } catch (e) {
            print(e);
        }
    }
}

function updateSpeed() {
    for (var i = 0; i <= 256; i++) {
        Block.setFriction(i, 0.1 * (5.1 - speed / 2));
    }
}

function updateSmine() {
    for (var i = 0; i <= 256; i++) {
        if (smine == 0)
            Block.setDestroyTime(i, breaktimes[i]);
        if (smine == 1)
            Block.setDestroyTime(i, breaktimes[i] / 100 * 91);
        if (smine == 2)
            Block.setDestroyTime(i, breaktimes[i] / 100 * 75);
        if (smine == 3)
            Block.setDestroyTime(i, breaktimes[i] / 100 * 60);
        if (smine == 4)
            Block.setDestroyTime(i, breaktimes[i] / 1000 * 2);
    }
}

randomdialog();

function entityHurtHook(att, vic, dmg) {
    if (vic == Player.getEntity() && godmode)
        preventDefault();
}

function newLevel() {
    online = false;
}



function ItemgetEnchantType(id) {
    if (id == 340) return 0;
    if (Item.getUseAnimation(id) == UseAnimation.bow) return 1;
    if (id == 258 || id == 271 || id == 275 || id == 279 || id == 286) return 2;
    if (id == 290 || id == 291 || id == 292 || id == 293 || id == 294) return 2;
    if (id == 257 || id == 270 || id == 274 || id == 278 || id == 285) return 2;
    if (id == 256 || id == 269 || id == 273 || id == 277 || id == 284) return 2;
    if (id == 359 || id == 259) return 2;
    if (id == 267 || id == 268 || id == 272 || id == 276 || id == 283) return 3;
    if (id >= 298 && id <= 317) return 4;
    if (id == 346) return 5;
}

function parseEnch(slot) {
    var e = net.zhuoweizhang.mcpelauncher.ScriptManager.nativePlayerGetEnchantments(slot);
    var all = new Array(63);
    for (var ii = 0; ii < all.length; ii++) {
        all[ii] = "";

    }

    for (var i = 0; i <= e.length; i += 2) {
        var type = e[i];
        var level = e[i + 1];
        all[type] = level + "";
    }
    return all;
}




function enchanter(slot) {
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            var e = parseEnch(slot);
            var alert = new android.app.AlertDialog.Builder(ctx);
            alert.setTitle('Enchant');
            var scroll = new android.widget.ScrollView(ctx);
            var layout = new android.widget.LinearLayout(ctx);
            layout.setOrientation(1);
            var layout2 = new android.widget.RelativeLayout(ctx);
            var edit = new android.widget.EditText(ctx);
            edit.setHint("Level");
            var params = new android.widget.LinearLayout.LayoutParams(-1, -1, 1);

            //Unbreaking 

            var Unbreaking = new android.widget.LinearLayout(ctx);
            Unbreaking.setOrientation(0);
            var Unbreaking1 = new android.widget.CheckBox(ctx);
            Unbreaking1.setText(ModPE.getI18n("enchantment.durability"));
            Unbreaking1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Unbreaking2 = new android.widget.EditText(ctx);
            Unbreaking2.setHint("Level");
            Unbreaking2.setSingleLine(true);

            Unbreaking2.setText(e[Enchantment.UNBREAKING]);
            Unbreaking2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Unbreaking.addView(Unbreaking1);
            Unbreaking.addView(Unbreaking2, params);


            //Efficiency

            var Efficiency = new android.widget.LinearLayout(ctx);
            Efficiency.setOrientation(0);
            var Efficiency1 = new android.widget.CheckBox(ctx);
            Efficiency1.setText(ModPE.getI18n("enchantment.digging"));
            Efficiency1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Efficiency2 = new android.widget.EditText(ctx);
            Efficiency2.setHint("Level");
            Efficiency2.setSingleLine(true);
            Efficiency2.setText(e[Enchantment.EFFICIENCY]);
            Efficiency2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Efficiency.addView(Efficiency1);
            Efficiency.addView(Efficiency2, params);




            //Fortune

            var Fortune = new android.widget.LinearLayout(ctx);
            Fortune.setOrientation(0);
            var Fortune1 = new android.widget.CheckBox(ctx);
            Fortune1.setText(ModPE.getI18n("enchantment.lootBonusDigger"));
            Fortune1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Fortune2 = new android.widget.EditText(ctx);
            Fortune2.setHint("Level");
            Fortune2.setSingleLine(true);
            Fortune2.setText(e[Enchantment.FORTUNE]);
            Fortune2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Fortune.addView(Fortune1);
            Fortune.addView(Fortune2, params);


            //Silk Touch

            var SilkTouch = new android.widget.LinearLayout(ctx);
            SilkTouch.setOrientation(0);
            var SilkTouch1 = new android.widget.CheckBox(ctx);
            SilkTouch1.setText(ModPE.getI18n("enchantment.untouching"));
            SilkTouch1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var SilkTouch2 = new android.widget.EditText(ctx);
            SilkTouch2.setHint("Level");
            SilkTouch2.setSingleLine(true);
            SilkTouch2.setText(e[Enchantment.SILK_TOUCH]);
            SilkTouch2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            SilkTouch.addView(SilkTouch1);
            SilkTouch.addView(SilkTouch2, params);

            //Weapons


            //FEUER  

            var feuer = new android.widget.LinearLayout(ctx);
            feuer.setOrientation(0);
            var feuer1 = new android.widget.CheckBox(ctx);
            feuer1.setText(ModPE.getI18n("enchantment.fire"));
            feuer1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var feuer2 = new android.widget.EditText(ctx);
            feuer2.setHint("Level");
            feuer2.setSingleLine(true);
            feuer2.setText(e[Enchantment.FIRE_ASPECT]);
            feuer2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            feuer.addView(feuer1);
            feuer.addView(feuer2, params);


            //Knockback

            var Knockback = new android.widget.LinearLayout(ctx);
            Knockback.setOrientation(0);
            var Knockback1 = new android.widget.CheckBox(ctx);
            Knockback1.setText(ModPE.getI18n("enchantment.knockback"));
            Knockback1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Knockback2 = new android.widget.EditText(ctx);
            Knockback2.setHint("Level");
            Knockback2.setSingleLine(true);
            Knockback2.setText(e[Enchantment.KNOCKBACK]);
            Knockback2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Knockback.addView(Knockback1);
            Knockback.addView(Knockback2, params);


            //sharp

            var Sharp = new android.widget.LinearLayout(ctx);
            Sharp.setOrientation(0);
            var Sharp1 = new android.widget.CheckBox(ctx);
            Sharp1.setText(ModPE.getI18n("enchantment.damage.all"));
            Sharp1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Sharp2 = new android.widget.EditText(ctx);
            Sharp2.setHint("Level");
            Sharp2.setSingleLine(true);
            Sharp2.setText(e[Enchantment.SHARPNESS]);
            Sharp2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Sharp.addView(Sharp1);
            Sharp.addView(Sharp2, params);


            //looting 

            var Looting = new android.widget.LinearLayout(ctx);
            Looting.setOrientation(0);
            var Looting1 = new android.widget.CheckBox(ctx);
            Looting1.setText(ModPE.getI18n("enchantment.lootBonus"));
            Looting1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Looting2 = new android.widget.EditText(ctx);
            Looting2.setHint("Level");
            Looting2.setSingleLine(true);
            Looting2.setText(e[Enchantment.LOOTING]);
            Looting2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Looting.addView(Looting1);
            Looting.addView(Looting2, params);


            //smite 


            var smite = new android.widget.LinearLayout(ctx);
            smite.setOrientation(0);
            var smite1 = new android.widget.CheckBox(ctx);
            smite1.setText(ModPE.getI18n("enchantment.damage.undead"));
            smite1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var smite2 = new android.widget.EditText(ctx);
            smite2.setHint("Level");
            smite2.setSingleLine(true);
            smite2.setText(e[Enchantment.SMITE]);
            smite2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            smite.addView(smite1);
            smite.addView(smite2, params);


            //Bane Of Arthropods

            var BaneOfArthropods = new android.widget.LinearLayout(ctx);
            BaneOfArthropods.setOrientation(0);
            var BaneOfArthropods1 = new android.widget.CheckBox(ctx);
            BaneOfArthropods1.setText(ModPE.getI18n("enchantment.damage.arthropods"));
            BaneOfArthropods1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var BaneOfArthropods2 = new android.widget.EditText(ctx);
            BaneOfArthropods2.setHint("Level");
            BaneOfArthropods2.setSingleLine(true);
            BaneOfArthropods2.setText(e[Enchantment.BANE_OF_ARTHROPODS]);
            BaneOfArthropods2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            BaneOfArthropods.addView(BaneOfArthropods1);
            BaneOfArthropods.addView(BaneOfArthropods2, params);

            //Armor
            //Protection 

            var Protection = new android.widget.LinearLayout(ctx);
            Protection.setOrientation(0);
            var Protection1 = new android.widget.CheckBox(ctx);
            Protection1.setText(ModPE.getI18n("enchantment.protect.all"));
            Protection1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Protection2 = new android.widget.EditText(ctx);
            Protection2.setHint("Level");
            Protection2.setSingleLine(true);
            Protection2.setText(e[Enchantment.PROTECTION]);
            Protection2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Protection.addView(Protection1);
            Protection.addView(Protection2, params);



            //Fire Protection

            var FireProtection = new android.widget.LinearLayout(ctx);
            FireProtection.setOrientation(0);
            var FireProtection1 = new android.widget.CheckBox(ctx);
            FireProtection1.setText(ModPE.getI18n("enchantment.protect.fire"));
            FireProtection1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var FireProtection2 = new android.widget.EditText(ctx);
            FireProtection2.setHint("Level");
            FireProtection2.setSingleLine(true);
            FireProtection2.setText(e[Enchantment.FIRE_PROTECTION]);
            FireProtection2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            FireProtection.addView(FireProtection1);
            FireProtection.addView(FireProtection2, params);


            //Blast Protection

            var BlastProtection = new android.widget.LinearLayout(ctx);
            BlastProtection.setOrientation(0);
            var BlastProtection1 = new android.widget.CheckBox(ctx);
            BlastProtection1.setText(ModPE.getI18n("enchantment.protect.explosion"));
            BlastProtection1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var BlastProtection2 = new android.widget.EditText(ctx);
            BlastProtection2.setHint("Level");
            BlastProtection2.setSingleLine(true);
            BlastProtection2.setText(e[Enchantment.BLAST_PROTECTION]);
            BlastProtection2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            BlastProtection.addView(BlastProtection1);
            BlastProtection.addView(BlastProtection2, params);

            // Projectile Protection

            var ProjectileProtection = new android.widget.LinearLayout(ctx);
            ProjectileProtection.setOrientation(0);
            var ProjectileProtection1 = new android.widget.CheckBox(ctx);
            ProjectileProtection1.setText(ModPE.getI18n("enchantment.protect.projectile"));
            ProjectileProtection1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var ProjectileProtection2 = new android.widget.EditText(ctx);
            ProjectileProtection2.setHint("Level");
            ProjectileProtection2.setSingleLine(true);
            ProjectileProtection2.setText(e[Enchantment.PROJECTILE_PROTECTION]);
            ProjectileProtection2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            ProjectileProtection.addView(ProjectileProtection1);
            ProjectileProtection.addView(ProjectileProtection2, params);



            //Respiration

            var Respiration = new android.widget.LinearLayout(ctx);
            Respiration.setOrientation(0);
            var Respiration1 = new android.widget.CheckBox(ctx);
            Respiration1.setText(ModPE.getI18n("enchantment.oxygen"));
            Respiration1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Respiration2 = new android.widget.EditText(ctx);
            Respiration2.setHint("Level");
            Respiration2.setSingleLine(true);
            Respiration2.setText(e[Enchantment.RESPIRATION]);
            Respiration2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Respiration.addView(Respiration1);
            Respiration.addView(Respiration2, params);


            //Aqua Affinity

            var AquaAffinity = new android.widget.LinearLayout(ctx);
            AquaAffinity.setOrientation(0);
            var AquaAffinity1 = new android.widget.CheckBox(ctx);
            AquaAffinity1.setText(ModPE.getI18n("enchantment.waterWorker"));
            AquaAffinity1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var AquaAffinity2 = new android.widget.EditText(ctx);
            AquaAffinity2.setHint("Level");
            AquaAffinity2.setSingleLine(true);
            AquaAffinity2.setText(e[Enchantment.AQUA_AFFINITY]);
            AquaAffinity2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            AquaAffinity.addView(AquaAffinity1);
            AquaAffinity.addView(AquaAffinity2, params);

            //Thorns
            var Thorns = new android.widget.LinearLayout(ctx);
            Thorns.setOrientation(0);
            var Thorns1 = new android.widget.CheckBox(ctx);
            Thorns1.setText(ModPE.getI18n("enchantment.thorns"));
            Thorns1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Thorns2 = new android.widget.EditText(ctx);
            Thorns2.setHint("Level");
            Thorns2.setSingleLine(true);
            Thorns2.setText(e[Enchantment.THORNS]);
            Thorns2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Thorns.addView(Thorns1);
            Thorns.addView(Thorns2, params);

            //Bow
            //Power 

            var Power = new android.widget.LinearLayout(ctx);
            Power.setOrientation(0);
            var Power1 = new android.widget.CheckBox(ctx);
            Power1.setText(ModPE.getI18n("enchantment.arrowDamage"));
            Power1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Power2 = new android.widget.EditText(ctx);
            Power2.setHint("Level");
            Power2.setSingleLine(true);
            Power2.setText(e[Enchantment.POWER]);
            Power2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Power.addView(Power1);
            Power.addView(Power2, params);


            //Infinity 

            var Infinity = new android.widget.LinearLayout(ctx);
            Infinity.setOrientation(0);
            var Infinity1 = new android.widget.CheckBox(ctx);
            Infinity1.setText(ModPE.getI18n("enchantment.arrowInfinite"));
            Infinity1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Infinity2 = new android.widget.EditText(ctx);
            Infinity2.setHint("Level");
            Infinity2.setSingleLine(true);
            Infinity2.setText(e[Enchantment.INFINITY]);
            Infinity2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Infinity.addView(Infinity1);
            Infinity.addView(Infinity2, params);

            //Flame

            var Flame = new android.widget.LinearLayout(ctx);
            Flame.setOrientation(0);
            var Flame1 = new android.widget.CheckBox(ctx);
            Flame1.setText(ModPE.getI18n("enchantment.arrowFire"));
            Flame1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Flame2 = new android.widget.EditText(ctx);
            Flame2.setHint("Level");
            Flame2.setSingleLine(true);
            Flame2.setText(e[Enchantment.FLAME]);
            Flame2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);


            Flame.addView(Flame1);
            Flame.addView(Flame2, params);


            //Punsch

            var Punch = new android.widget.LinearLayout(ctx);
            Punch.setOrientation(0);
            var Punch1 = new android.widget.CheckBox(ctx);
            Punch1.setText(ModPE.getI18n("enchantment.arrowKnockback"));
            Punch1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Punch2 = new android.widget.EditText(ctx);
            Punch2.setHint("Level");
            Punch2.setSingleLine(true);
            Punch2.setText(e[Enchantment.PUNCH]);
            Punch2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Punch.addView(Punch1);
            Punch.addView(Punch2, params);

            //Angel

            //Lure 

            var Lure = new android.widget.LinearLayout(ctx);
            Lure.setOrientation(0);
            var Lure1 = new android.widget.CheckBox(ctx);
            Lure1.setText(ModPE.getI18n("enchantment.fishingSpeed"));
            Lure1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Lure2 = new android.widget.EditText(ctx);
            Lure2.setHint("Level");
            Lure2.setSingleLine(true);
            Lure2.setText(e[Enchantment.LURE]);
            Lure2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Lure.addView(Lure1);
            Lure.addView(Lure2, params);


            //Luck of the sei

            var Luckofthesea = new android.widget.LinearLayout(ctx);
            Luckofthesea.setOrientation(0);
            var Luckofthesea1 = new android.widget.CheckBox(ctx);
            Luckofthesea1.setText(ModPE.getI18n("enchantment.lootBonusFishing"));
            Luckofthesea1.setOnClickListener(new android.view.View.OnClickListener({
                onClick: function(viewarg) {

                }
            }));
            var Luckofthesea2 = new android.widget.EditText(ctx);
            Luckofthesea2.setHint("Level");
            Luckofthesea2.setSingleLine(true);
            Luckofthesea2.setText(e[Enchantment.LUCK_OF_THE_SEA]);
            Luckofthesea2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);

            Luckofthesea.addView(Luckofthesea1);
            Luckofthesea.addView(Luckofthesea2, params);
            Unbreaking1.setChecked(!(e[Enchantment.UNBREAKING] == ""));
            layout.addView(Unbreaking);
            if (ItemgetEnchantType(Player.getInventorySlot(slot)) == 1) {
                Power1.setChecked(!(e[Enchantment.POWER] == ""));
                layout.addView(Power);
                Infinity1.setChecked(!(e[Enchantment.INFINITY] == ""));
                layout.addView(Infinity);
                Flame1.setChecked(!(e[Enchantment.FLAME] == ""));
                layout.addView(Flame);
                Punch1.setChecked(!(e[Enchantment.PUNCH] == ""));
                layout.addView(Punch);
            }
            if (ItemgetEnchantType(Player.getInventorySlot(slot)) == 2) {
                Efficiency1.setChecked(!(e[Enchantment.EFFICIENCY] == ""));
                layout.addView(Efficiency);
                Fortune1.setChecked(!(e[Enchantment.FORTUNE] == ""));
                layout.addView(Fortune);
                SilkTouch1.setChecked(!(e[Enchantment.SILK_TOUCH] == ""));
                layout.addView(SilkTouch);
            }
            if (ItemgetEnchantType(Player.getInventorySlot(slot)) == 3) {
                feuer1.setChecked(!(e[Enchantment.FIRE_ASPECT] == ""));
                layout.addView(feuer);
                Knockback1.setChecked(!(e[Enchantment.KNOCKBACK] == ""));
                layout.addView(Knockback);
                Sharp1.setChecked(!(e[Enchantment.SHARPNESS] == ""));
                layout.addView(Sharp);
                Looting1.setChecked(!(e[Enchantment.LOOTING] == ""));
                layout.addView(Looting);
                smite1.setChecked(!(e[Enchantment.SMITE] == ""));
                layout.addView(smite);
                BaneOfArthropods1.setChecked(!(e[Enchantment.BANE_OF_ARTHROPODS] == ""));
                BaneOfArthropods1.setEnabled(false);
                BaneOfArthropods1.setChecked(false);
                layout.addView(BaneOfArthropods);
            }
            if (ItemgetEnchantType(Player.getInventorySlot(slot)) == 4) {
                Protection1.setChecked(!(e[Enchantment.PROTECTION] == ""));
                layout.addView(Protection);
                FireProtection1.setChecked(!(e[Enchantment.FIRE_PROTECTION] == ""));
                layout.addView(FireProtection);
                BlastProtection1.setChecked(!(e[Enchantment.BLAST_PROTECTION] == ""));
                layout.addView(BlastProtection);
                ProjectileProtection1.setChecked(!(e[Enchantment.PROJECTILE_PROTECTION] == ""));
                layout.addView(ProjectileProtection);
                Respiration1.setChecked(!(e[Enchantment.RESPIRATION] == ""));
                layout.addView(Respiration);
                AquaAffinity1.setChecked(!(e[Enchantment.AQUA_AFFINITY] == ""));
                layout.addView(AquaAffinity);
                Thorns1.setChecked(!(e[Enchantment.THORNS] == ""));
                layout.addView(Thorns);
            }
            if (ItemgetEnchantType(Player.getInventorySlot(slot)) == 5) {
                Lure1.setChecked(!(e[Enchantment.LURE] == ""));
                layout.addView(Lure);
                Luckofthesea1.setChecked(!(e[Enchantment.LUCK_OF_THE_SEA] == ""));
                layout.addView(Luckofthesea);
            }


            layout2.addView(layout, android.widget.LinearLayout.LayoutParams(-2, -2));
            scroll.setFillViewport(true);

            scroll.addView(layout2, android.widget.LinearLayout.LayoutParams(-2, -2));


            alert.setView(scroll);
            alert.setPositiveButton('Enchant', new android.content.DialogInterface.OnClickListener() {
                onClick: function(viewarg) {
                    //Your Code Here...
                    //tools 

                    if (SilkTouch1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, SilkTouch2.getText());

                    if (Fortune1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, Fortune2.getText());

                    if (Efficiency1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, Efficiency2.getText());

                    if (Unbreaking1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, Unbreaking2.getText());
                    //weapon
                    if (feuer1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, feuer2.getText());

                    if (Knockback1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, Knockback2.getText());

                    if (Sharp1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, Sharp2.getText());

                    if (Looting1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, Looting2.getText());

                    if (smite1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, smite2.getText());

                    if (BaneOfArthropods1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, BaneOfArthropods2.getText());

                    if (Protection1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, Protection2.getText());

                    if (FireProtection1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, FireProtection2.getText());

                    if (BlastProtection1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, BlastProtection2.getText());

                    if (ProjectileProtection1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, ProjectileProtection2.getText());

                    if (Respiration1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, Respiration2.getText());

                    if (AquaAffinity1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, AquaAffinity2.getText());

                    if (Thorns1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, Thorns2.getText());

                    if (Power1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, Power2.getText());

                    if (Infinity1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, Infinity2.getText());

                    if (Flame1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, Flame2.getText());

                    if (Punch1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, Punch2.getText());

                    if (Lure1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, Lure2.getText());

                    if (Luckofthesea1.isChecked())
                        Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, Luckofthesea2.getText());
                }
            });
            alert.setNegativeButton("Close", new android.content.DialogInterface.OnClickListener() {
                onClick: function(viewarg) {
                    //Your Code Here...
                }
            });
            alert.setNeutralButton("Remove all", new android.content.DialogInterface.OnClickListener() {
                onClick: function(viewarg) {
                    Player.setSelectedSlotId(slot);
                    Entity.setCarriedItem(Player.getEntity(), getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());
                }
            })

            var dialog = alert.create();
            dialog.show();
        }
    }));
}
